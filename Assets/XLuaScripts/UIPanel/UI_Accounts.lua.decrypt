---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2019/1/10 14:21
---
require("UIPanel.Ugc.UI_UgcClearing_cold_2")
UI_Accounts = {}
UI_Accounts.__index = UI_Accounts
UI_Accounts.panelName = "UI_Accounts"
UI_Accounts.packageName = "Level"
UI_Accounts.componentName = "UIAccounts"
UI_Accounts.UIComID =32
UI_Accounts.className = 'UI_Accounts'
function UI_Accounts.New(UIShowFunc)
    --这里等把usedata解析出来之后在来判断
    if type(UIShowFunc) == "userdata" then
        UI_Accounts.UIShowFunc = UIShowFunc
    end
    --print("UI_Accounts new")
    UI_Accounts.UIShowFunc = UIShowFunc
    BasePanelObject.New(UI_Accounts)

    if UI_Accounts.contentPane ~= nil then
        UI_Accounts.panel = UI_Accounts.contentPane:GetChild("Accounts")
        ---能量条
        UI_Accounts.Button_yaoshui =   UI_Accounts.contentPane:GetChild("Button_yaoshui")
        UI_Accounts.Button_yaoshui.onClick:Set(function ()
            CS.EventCtrl.inst:LuaTriggerEvent("HANDLE_WINDOW_OPENPAYSHOP","int",{1})
        end)
        UI_Accounts.Button_yaoshuiTitle=  UI_Accounts.Button_yaoshui:GetChild("title")
        ---返回
        UI_Accounts.button_cancel =  UI_Accounts.panel:GetChild("button_cancel")
        UI_Accounts.button_cancel.onClick:Set(function ()
            CS.UILuaWindowBase.HideWindow("UI_Accounts")
            UI_Accounts:BackUGC()
        end)
        ---上传
        UI_Accounts.button_upload =  UI_Accounts.panel:GetChild("button_upload")
        UI_Accounts.button_upload.onClick:Set(function ()
            UGCModel.getInstance().model:UploadCurUGCEditorLevelRqst()
        end)
        ---购买
        UI_Accounts.Button_buy =  UI_Accounts.panel:GetChild("Button_buy")
        UI_Accounts.Button_buy.onClick:Set(function ()
            CS.EventCtrl.inst:LuaTriggerEvent("HANDLE_WINDOW_OPENPAYSHOP","int",{1})
            CS.EventCtrl.inst:LuaTriggerEvent("HANDLE_SHOPITEM_HIDEWIN","string,bool",{"UI_Accounts",true})
        end)
        ---重试
        UI_Accounts.button_chongshi =  UI_Accounts.panel:GetChild("button_chongshi")
        UI_Accounts.button_chongshi.onClick:Set(function ()
            UGCModel.StartGameWithCurLevelProfile()
            CS.UILuaWindowBase.HideWindow("UI_Accounts")
        end)
        UI_Accounts.list_order= UI_Accounts.panel:GetChild("list_order")
        UI_Accounts.IfPass= UI_Accounts.panel:GetController("IfPass")
        UI_Accounts.title= UI_Accounts.panel:GetChild("title")
        UI_Accounts.UGCTestPass_in=UI_Accounts.contentPane:GetTransition("UGCTestPass_in")
        UI_Accounts.UGCTestPass_out= UI_Accounts.contentPane:GetTransition("UGCTestPass_out")
        UI_Accounts.UGCTestFail_in=UI_Accounts.contentPane:GetTransition("UGCTestFail_in")
        UI_Accounts.UGCTestFail_out= UI_Accounts.contentPane:GetTransition("UGCTestFail_out")
        UI_Accounts.UGCTestBuy_in= UI_Accounts.contentPane:GetTransition("UGCTestBuy_in")
        UI_Accounts.UGCTestBuy_out= UI_Accounts.contentPane:GetTransition("UGCTestBuy_out")
        UI_Accounts:Inituiinfo()
    end
    UI_Accounts:OpenPanel()
end

function UI_Accounts:BackUGC()
    if CS.MatchTreeProxy.inst:GetUGCTryPlay() then
        CS.MatchTreeProxy.inst:ExitUGC()
    else
        CS.MatchTreeProxy.inst:ClearUGCField()
    end

end
------初始化UI
function UI_Accounts:Inituiinfo()
    UI_Accounts.orders={}
    local levelInfo=UGCModel.getInstance().model.curlevelProfile
    UI_Accounts.list_order:RemoveChildrenToPool(0, UI_Accounts.list_order:GetChildren().Length)
    for i = 1, 2 do
        if levelInfo.targets[i] and levelInfo.targets[i]~="None" then
            local target=UGCItemConfigManager.getInstance().GetTarget(levelInfo.targets[i],levelInfo.colorIds[i])
            UI_Accounts.orders[i]= UI_UgcClearing_cold_2.new(  UI_Accounts.list_order:AddItemFromPool(),target.icon,0, CS.MatchTreeProxy.inst:GetTargetFinishState(i-1))
        end
    end
    UI_Accounts.Button_yaoshuiTitle.text=CS.GUIHelper.InsertSymbolToString(UGCModel.getInstance().model:GetEnergyCount(),3)
    if UGCModel.getInstance().model:GetGameResult() then
        if UGCModel.getInstance().model:CheckEnergyCount() then
            UI_Accounts.IfPass.selectedIndex=0
            UI_Accounts.UGCTestPass_in:Play()
            UI_Accounts.button_upload.enabled=UGCModel.getInstance().model:GetSavedState()
        else
            UI_Accounts.IfPass.selectedIndex=2
            UI_Accounts.UGCTestBuy_in:Play()
        end
        UI_Accounts.title.text=UGCModel.getInstance().model:GetUplodTipString()
    else
        UI_Accounts.IfPass.selectedIndex=1
        UI_Accounts.UGCTestFail_in:Play()
    end

end

function UI_Accounts.OnFlushUIState()
    UI_Accounts.Button_yaoshuiTitle.text=CS.GUIHelper.InsertSymbolToString(UGCModel.getInstance().model:GetEnergyCount(),3)
    if UGCModel.getInstance().model:GetGameResult() then
        if UGCModel.getInstance().model:CheckEnergyCount() then
            UI_Accounts.IfPass.selectedIndex=0
            UI_Accounts.button_upload.enabled=UGCModel.getInstance().model:GetSavedState()
        else
            UI_Accounts.IfPass.selectedIndex=2
        end
        UI_Accounts.title.text=UGCModel.getInstance().model:GetUplodTipString()
    end
end

function UI_Accounts.OnSendCheckData(data)

end

function UI_Accounts:OpenPanel()
    self:OpenPanelBase()
end

function UI_Accounts:ClosePanel()
    self:ClosePanelBase()
end

function UI_Accounts.AddListeners()
     --CS.EventCtrl.inst:LuaAddEventListener("EVENT_MATCHTREE_SENDCHECKDATA","string" ,UI_Accounts.OnSendCheckData)
     Event.AddListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , UI_Accounts.OnGCUgcLevelOptRspdRspd)
     CS.EventCtrl.inst:LuaAddEventListener("EVENT_MATCHTREE_UPDATEENERGYCOUNT",nil ,UI_Accounts.OnUpdateUGCEnergy)
end

function UI_Accounts.RemoveListeners()
      --CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_MATCHTREE_SENDCHECKDATA","string" , UI_Accounts.OnSendCheckData)
      Event.RemoveListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , UI_Accounts.OnGCUgcLevelOptRspdRspd)
      CS.EventCtrl.inst:LuaAddEventListener("EVENT_MATCHTREE_UPDATEENERGYCOUNT",nil ,UI_Accounts.OnUpdateUGCEnergy)
end

function UI_Accounts.OnGCUgcLevelOptRspdRspd(...)
    local rspd = MsgType.GCUgcLevelOptRspd:New(...)
    if rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Upload then
        if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
            CS.GameMsgHint.inst:ShowSmallTips(sstring.Format(CS.GUIHelper.ParseStringTable(3209)))
        else
            CS.GameMsgHint.inst:ShowSmallTips(sstring.Format(CS.GUIHelper.ParseStringTable(3212)))
        end
    end
    if UI_Accounts.IfPass.selectedIndex==2 then
        UI_Accounts.UGCTestBuy_out:Play()
    else
        UI_Accounts.UGCTestPass_out:Play()
    end
    CS.UILuaWindowBase.HideWindow("UI_Accounts")
    local co1 = coroutine.create(function()
        yield_return(CS.WaitCoroutineDefine.WaitFor1dot5s)
        CS.MatchTreeProxy.inst:ExitUGC()
    end )
    assert(coroutine.resume(co1))
end

function UI_Accounts.OnUpdateUGCEnergy()
    UI_Accounts.OnFlushUIState()
end

function UI_Accounts.OnShown()
    if UGCModel.getInstance().model:GetGameResult() then
        UGCModel.getInstance().model:SendUGCCheckData()
    end
end

function UI_Accounts.OnHide()
    UI_Accounts.Dispose()
end

function UI_Accounts.Dispose()
    UI_Accounts.panel = nil
    ---能量条
    UI_Accounts.Button_yaoshui =  nil
    UI_Accounts.Button_yaoshuiTitle=  nil
    ---返回
    UI_Accounts.button_cancel =  nil
    ---上传
    UI_Accounts.button_upload = nil

    UI_Accounts.Button_buy = nil

    UI_Accounts.button_chongshi =  nil

    UI_Accounts.list_order= nil
    UI_Accounts.IfPass= nil
    UI_Accounts.title= nil
    UI_Accounts.UGCTestPass_in=nil
    UI_Accounts.UGCTestPass_out= nil
    UI_Accounts.UGCTestFail_in=nil
    UI_Accounts.UGCTestFail_out= nil
    UI_Accounts.UGCTestBuy_in= nil
    UI_Accounts.UGCTestBuy_out= nil
    for i, v in pairs(  UI_Accounts.orders) do
        v:Dispose()
    end
    UI_Accounts.orders=nil
end