---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yzc.
--- DateTime: 2018/9/7 18:23
---
require("UIComponent.Com_Task")
UI_TaskEveryday = {}
UI_TaskEveryday.__index = UI_TaskEveryday
UI_TaskEveryday.panelName = "UI_TaskEveryday"
UI_TaskEveryday.packageName = "DailyTask"
UI_TaskEveryday.componentName = "UITaskEveryday"
UI_TaskEveryday.UIComID = 11--FUIComEnum.UITaskEveryday
UI_TaskEveryday.className = 'UI_TaskEveryday'

UI_TaskEveryday.isOPen = false
function UI_TaskEveryday.New(UIShowFunc)
    --这里等把usedata解析出来之后在来判断
    if type(UIShowFunc) == "userdata" then
        UI_TaskEveryday.UIShowFunc = UIShowFunc
    end
    --UIObjectFactory.SetPackageItemExtension(CS.UI_mail_xitong_card.URL, typeof(CS.UI_mail_xitong_card));
    UI_TaskEveryday.UIShowFunc = UIShowFunc
    BasePanelObject.New(UI_TaskEveryday)

    if UI_TaskEveryday.contentPane ~= nil then
        UI_TaskEveryday.contentPane:Center()
        --UI_TaskEveryday.m_coverBG = UI_TaskEveryday.contentPane:GetChild("CoverBG")
        UI_TaskEveryday.m_cancleButton = UI_TaskEveryday.contentPane:GetChild("close")
        UI_TaskEveryday.m_cancleButton.onClick:Add(function() CS.UILuaWindowBase.HideWindow("UI_TaskEveryday") end)
        UI_TaskEveryday.m_winOpen = UI_TaskEveryday.contentPane:GetTransition("WindowOpen")
        UI_TaskEveryday.m_task_go = UI_TaskEveryday.contentPane:GetChild("repoct")
        --UI_TaskEveryday.m_closeButton = UI_TaskEveryday.m_task_go:GetChild("close")
        --UI_TaskEveryday.m_closeButton.onClick:Add(function() CS.UILuaWindowBase.HideWindow("UI_TaskEveryday") end)
        UI_TaskEveryday.m_bossModelLoader = UI_TaskEveryday.contentPane:GetChild("moxing")
        --UI_TaskEveryday.m_bossModelLoader = UI_TaskEveryday.m_bossCom:GetChild("boss")
        UI_TaskEveryday.m_bg = UI_TaskEveryday.m_task_go:GetChild("bg")
        UI_TaskEveryday.m_title = UI_TaskEveryday.m_task_go:GetChild("title")
        UI_TaskEveryday.m_PrizeRank = UI_TaskEveryday.m_task_go:GetChild("Mark")
        UI_TaskEveryday.m_markIconState =UI_TaskEveryday.m_PrizeRank:GetController("MarkIcon")
        UI_TaskEveryday.m_ProgressBar_repoct = UI_TaskEveryday.m_task_go:GetChild("ProgressBar_repoct")
        UI_TaskEveryday.m_boxRankTitle = UI_TaskEveryday.m_task_go:GetChild("title_none2")
        UI_TaskEveryday.m_boxTotalScore = UI_TaskEveryday.m_task_go:GetChild("title_none1")
        UI_TaskEveryday.m_currentScore = UI_TaskEveryday.m_task_go:GetChild("MarkNum")
        UI_TaskEveryday.m_tempAward1 = UI_TaskEveryday.m_task_go:GetChild("awards1")
        UI_TaskEveryday.m_tempAward2 = UI_TaskEveryday.m_task_go:GetChild("awards2")
        UI_TaskEveryday.m_tempAward3 = UI_TaskEveryday.m_task_go:GetChild("awards3")
        UI_TaskEveryday.m_awards1 =Com_TaskAward.new(UI_TaskEveryday.m_tempAward1)
        UI_TaskEveryday.m_awards2 = Com_TaskAward.new(UI_TaskEveryday.m_tempAward2)
        UI_TaskEveryday.m_awards3 = Com_TaskAward.new(UI_TaskEveryday.m_tempAward3)
        UI_TaskEveryday.m_jiantou1 = Com_TaskArrow.new(UI_TaskEveryday.m_task_go:GetChild("jiantou1"))
        UI_TaskEveryday.m_jiantou2 = Com_TaskArrow.new(UI_TaskEveryday.m_task_go:GetChild("jiantou2"))
        UI_TaskEveryday.m_jiantou3 = Com_TaskArrow.new(UI_TaskEveryday.m_task_go:GetChild("jiantou3"))
        UI_TaskEveryday.m_taskList = UI_TaskEveryday.m_task_go:GetChild("task_list")
        --UI_TaskEveryday.m_taskList:SetVirtual()
        UI_TaskEveryday.m_taskList:RemoveChildrenToPool(0,UI_TaskEveryday.m_taskList:GetChildren().Length)
        --[[
        UI_TaskEveryday.m_task_go = UI_TaskEveryday.contentPane:GetChild("task_go")
        UI_TaskEveryday.m_go = UI_TaskEveryday.m_task_go:GetController("go")
        UI_TaskEveryday.m_task_list = UI_TaskEveryday.m_task_go:GetChild("task_list").asList;
        UI_TaskEveryday.m_go_buttom = UI_TaskEveryday.m_task_go:GetChild("go_button").asButton;
        UI_TaskEveryday.m_keynum = UI_TaskEveryday.m_task_go:GetChild("num_title").asTextField;
		UI_TaskEveryday.m_windowOpen = UI_TaskEveryday.contentPane:GetTransition("WindowOpen")
		UI_TaskEveryday.m_windowClose = UI_TaskEveryday.contentPane:GetTransition("WindowClose")
		UI_TaskEveryday.m_quxiao = UI_TaskEveryday.contentPane:GetChild("quxiao")
        UI_TaskEveryday.m_box = UI_TaskEveryday.contentPane:GetChild("box")
        UI_TaskEveryday.m_kaisuo = UI_TaskEveryday.m_box:GetTransition("kaisuo");
        UI_TaskEveryday.m_queren = UI_TaskEveryday.m_box:GetTransition("queren");
        UI_TaskEveryday.m_CoverBG = UI_TaskEveryday.m_box:GetChild("CoverBG")
        UI_TaskEveryday.m_jinbi_num =UI_TaskEveryday.m_box:GetChild("jinbi_num").asTextField
        UI_TaskEveryday.m_task_list:SetVirtual();--设置虚拟列表，无限长度
        UI_TaskEveryday.m_go_buttom.onClick:Add(function ()--喜闻乐见的开箱子
            local CoinOpenBoxRqst = MsgType.CGCoinOpenBoxRqst:New()
            CoinOpenBoxRqst:Send()
        end)
		UI_TaskEveryday.m_quxiao.onClick:Add(function()
		UI_TaskEveryday.m_windowClose:Play(function()
			CS.UILuaWindowBase.HideWindow("UI_TaskEveryday")
		end)
		end)
        UI_TaskEveryday.m_CoverBG.onClick:Add(function() print("点击bg") UI_TaskEveryday.m_queren:Play()end)]]
        TaskEverydayModel.isTaskOPen = true
        TaskEverydayModel.GetTaskListInfoRqst()
    end
    UI_TaskEveryday:OpenPanel()
end

--初始化界面
function UI_TaskEveryday:InitUIInfo()
    --print("LevelIndex--"..CS.MatchTreeProxy.inst:GetLevelIndex())

    UI_TaskEveryday.m_markIconState.selectedIndex = 0
    --UI_TaskEveryday.InitTaskList()
    UI_TaskEveryday.SetBoxState()
    UI_TaskEveryday.CreateBossModel()
    --UI_TaskEveryday.SetMarkIconState(0)
    --UI_TaskEveryday.RefreshPrizeInfo()
   -- UI_TaskEveryday.OnGetPrizeBoxReward()
   -- UI_TaskEveryday.RefreshProgressBar()
end
--每日任务boss创建
function UI_TaskEveryday.CreateBossModel()
    local bossModle = CS.Helper.PlayFguiVfx("Boss","UIModel",100,UI_TaskEveryday.m_bossModelLoader,true)
    local bossAnim = bossModle.wrapTarget:GetComponent("Animation")
    UI_TaskEveryday.m_winOpen:SetHook("play", function() bossAnim:Play("Bosscoming") end)

end

function UI_TaskEveryday.RefreshTaskInfo()
    UI_TaskEveryday.InitTaskList()
    UI_TaskEveryday.OnGetPrizeBoxReward()
    UI_TaskEveryday.RefreshPrizeInfo()
    UI_TaskEveryday.RefreshProgressBar()
end

--初始化礼物箱状态
function UI_TaskEveryday:SetBoxState()
    UI_TaskEveryday.m_awards1.m_buttonLevel.selectedIndex = 0
    UI_TaskEveryday.m_awards2.m_buttonLevel.selectedIndex = 1
    UI_TaskEveryday.m_awards3.m_buttonLevel.selectedIndex = 2
end

local haveGetAward1 = false
local haveGetAward2 = false
local haveGetAward3 = false

--刷新礼物盒信息
function UI_TaskEveryday:RefreshPrizeInfo()
    local prizeBoxList = TaskEverydayModel.taskPrizeList
   -- local taskRewardfg = CS.TaskRewardconfigManager.Instance():GetAllConfig()
    local curNum = TaskEverydayModel.totalMark
    --print("taskReward.Length---"..tonumber(taskRewardfg.Length))
    --[[
    print(taskRewardfg[0].MarkNum)
    local cfg1 = taskRewardfg[prizeBoxList[1].rewardID-1]
    local cfg2 = taskRewardfg[prizeBoxList[2].rewardID-1]
    local cfg3 = taskRewardfg[prizeBoxList[3].rewardID-1]
    ]]
    local target1 = prizeBoxList[1].mark
    local target2 = prizeBoxList[2].mark
    local target3 = prizeBoxList[3].mark
   -- print("curNum---"..curNum)
    UI_TaskEveryday.m_jiantou1.m_arrowState.selectedIndex = 0
    UI_TaskEveryday.m_jiantou2.m_arrowState.selectedIndex = 0
    UI_TaskEveryday.m_jiantou3.m_arrowState.selectedIndex = 0
    UI_TaskEveryday.m_awards1.m_taskButtonState.selectedIndex = 0
    UI_TaskEveryday.m_awards2.m_taskButtonState.selectedIndex = 0
    UI_TaskEveryday.m_awards3.m_taskButtonState.selectedIndex = 0
    if curNum>=target1 and curNum <target2 then
        UI_TaskEveryday.m_awards1.m_taskButtonState.selectedIndex = prizeBoxList[1].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_jiantou1.m_arrowState.selectedIndex = 1
        UI_TaskEveryday.m_markIconState.selectedIndex = 0
    elseif curNum>=target2 and curNum<target3 then
        UI_TaskEveryday.m_awards1.m_taskButtonState.selectedIndex = prizeBoxList[1].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_awards2.m_taskButtonState.selectedIndex = prizeBoxList[2].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_jiantou1.m_arrowState.selectedIndex =1
        UI_TaskEveryday.m_jiantou2.m_arrowState.selectedIndex =1
        UI_TaskEveryday.m_markIconState.selectedIndex = 1
    elseif curNum>=target3 then
        UI_TaskEveryday.m_awards1.m_taskButtonState.selectedIndex = prizeBoxList[1].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_awards2.m_taskButtonState.selectedIndex = prizeBoxList[2].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_awards3.m_taskButtonState.selectedIndex = prizeBoxList[3].isRewarded ==1 and 2 or 1
        UI_TaskEveryday.m_jiantou1.m_arrowState.selectedIndex = 1
        UI_TaskEveryday.m_jiantou2.m_arrowState.selectedIndex = 1
        UI_TaskEveryday.m_jiantou3.m_arrowState.selectedIndex = 1
        UI_TaskEveryday.m_markIconState.selectedIndex = 2
    end
end

--刷新奖励进度条
function UI_TaskEveryday:RefreshProgressBar()
    if UI_TaskEveryday.m_ProgressBar_repoct.value<0 then UI_TaskEveryday.m_ProgressBar_repoct.value = 0  end
    UI_TaskEveryday.m_ProgressBar_repoct.max = 100
    if UI_TaskEveryday.m_ProgressBar_repoct.value>100 then
        UI_TaskEveryday.m_ProgressBar_repoct.value =100
    else
        UI_TaskEveryday.m_ProgressBar_repoct.value = tonumber(TaskEverydayModel.totalMark)
    end
end
--领奖
function UI_TaskEveryday:OnGetPrizeBoxReward()
    local prizeBoxList = TaskEverydayModel.taskPrizeList
    --[[
    print("isReward"..prizeBoxList[1].isRewarded)
    print("isReward"..prizeBoxList[1].rewardID)]]

    if prizeBoxList[1].isRewarded == 0 and prizeBoxList[1].mark<=TaskEverydayModel.totalMark  then
        UI_TaskEveryday.m_tempAward1.onClick:Add(function()
            --print("Get Awards One")
            TaskEverydayModel.GetPrizeBoxRqst(1)
            UI_TaskEveryday.RefreshPrizeInfo()
            UI_TaskEveryday.m_tempAward1.onClick:Clear()
        end)
    end
    if prizeBoxList[2].isRewarded == 0 and prizeBoxList[2].mark<=TaskEverydayModel.totalMark then
        UI_TaskEveryday.m_tempAward2.onClick:Add(function()
            TaskEverydayModel.GetPrizeBoxRqst(2)
            --print("Get Awards Two")
            UI_TaskEveryday.RefreshPrizeInfo()
            UI_TaskEveryday.m_tempAward2.onClick:Clear()
        end)
    end
    if prizeBoxList[3].isRewarded == 0 and prizeBoxList[3].mark<=TaskEverydayModel.totalMark then
        UI_TaskEveryday.m_tempAward3.onClick:Add(function()
            --print("Get Awards Three")
            TaskEverydayModel.GetPrizeBoxRqst(3)
            haveGetAward3 = true
            UI_TaskEveryday.RefreshPrizeInfo()
            UI_TaskEveryday.m_tempAward3.onClick:Clear()
            --CS.GUIHelper.GetBoxPrize()
        end)
    end
end

function UI_TaskEveryday:SetMarkIconState(index)
    UI_TaskEveryday.m_markIconState.selectedIndex = index
    --print("MarkIconIndex--"..tostring(index))
end

--初始化任务列表
function UI_TaskEveryday:InitTaskList()
   -- local taskCfg = CS.TaskEverydayconfigManager.Instance():GetALLOrderConfigs()
    UI_TaskEveryday.m_currentScore.text = TaskEverydayModel.totalMark
    UI_TaskEveryday.m_boxTotalScore.text = "/"..TaskEverydayModel.maxMark
    --print("taskCfg----"..tostring(taskCfg.Length))
    --print("???????????????????"..#TaskEverydayModel.tasklist)
    --UI_TaskEveryday.m_taskList.itemPool:Clear();
    --UI_TaskEveryday.m_taskList.scrollPane.ScrollTop();
    --UI_TaskEveryday.m_taskList:SetVirtual()
    --UI_TaskEveryday.m_taskList:RemoveChildrenToPool(0,UI_TaskEveryday.m_taskList:GetChildren().Length)
    UI_TaskEveryday.m_taskList.scrollPane:ScrollTop()
    local singleTaskList = TaskEverydayModel.tasklist
   -- print("maxMark----"..TaskEverydayModel.maxMark)
    UI_TaskEveryday.m_taskList.itemRenderer = function(index,item)
        --print(index)
        local singleTask = Com_Task.new(item)
       -- local cfg = taskCfg[index]
        local cfg =CS.TaskEverydayconfigManager.Instance():GetConfig(singleTaskList[index+1].taskID)
        singleTask.m_taskName.text = CS.GUIHelper.ParseStringTable(cfg.TaskName)
        if index==3 then
            --print(singleTaskList[index+1].progress)
        end
        singleTask.m_taskCompleteNum.text = "("..tostring(singleTaskList[index+1].progress)
        singleTask.m_taskTargetNum.text ="/"..singleTaskList[index+1].target..")"
        singleTask.m_taskDescription.text =CS.GUIHelper.ParseStringTable(cfg.TaskDescribe)
        singleTask.m_taskScore.text = singleTaskList[index+1].mark
        singleTask.m_taskIcon.url = cfg.TakeIcon
        singleTask.m_startButton.onClick:Add(function()
                UI_TaskEveryday.StartTask(cfg.Type)
        end)
      -- print("progress--"..singleTaskList[index+1].target)
        --print("taskID---"..singleTaskList[index+1].target.."progress--"..singleTaskList[index+1].progress)

        if singleTaskList[index+1].target <= singleTaskList[index+1].progress then
            singleTask.m_startButton.onClick:Clear()
            --singleTask.m_taskLinkButton.selectedIndex = 1
            singleTask.m_taskCompleteState.selectedIndex = 1
        else
            --singleTask.m_taskLinkButton.selectedIndex = 0
            singleTask.m_taskCompleteState.selectedIndex = 0
        end
        --[[
        if TaskEverydayModel.tasklist[index]> cfg.Type then

        end]]
       -- print("taskConfig--"..taskCfg[index].ID)
        --print("CurrentIndex---"..tostring(index))
    end
    UI_TaskEveryday.m_taskList.numItems = #TaskEverydayModel.tasklist
end

function UI_TaskEveryday.OnWindowHide()
    
end

function  UI_TaskEveryday:ClearListToPool()
    UI_TaskEveryday.m_taskList:RemoveChildrenToPool(0,UI_TaskEveryday.m_taskList:GetChildren().Length)
end


function UI_TaskEveryday:OpenPanel()
    --TaskEverydayModel.CoinActivityRqst()
    UI_TaskEveryday.InitUIInfo()
    --local CoinActivityInfoRqst = MsgType.CGCoinActivityInfoRqst:New()
    --CoinActivityInfoRqst:Send()
    --[[
    UI_TaskEveryday.RefreshTaskList()
	UI_TaskEveryday.m_windowOpen:Play()]]
    self:OpenPanelBase()
end

function UI_TaskEveryday:ClosePanel()
	--UI_TaskEveryday.m_windowClose:Play()
	self:ClosePanelBase()
end

function UI_TaskEveryday:OnAlObjectGC()
    UI_TaskEveryday.contentPane = nil
    UI_TaskEveryday.m_cancleButton = nil
    UI_TaskEveryday.m_winOpen = nil
    UI_TaskEveryday.m_task_go = nil
    UI_TaskEveryday.m_bossModelLoader = nil
    UI_TaskEveryday.m_bg = nil
    UI_TaskEveryday.m_title = nil
    UI_TaskEveryday.m_PrizeRank = nil
    UI_TaskEveryday.m_markIconState =nil
    UI_TaskEveryday.m_ProgressBar_repoct = nil
    UI_TaskEveryday.m_boxRankTitle = nil
    UI_TaskEveryday.m_boxTotalScore = nil
    UI_TaskEveryday.m_currentScore =nil
    UI_TaskEveryday.m_tempAward1 = nil
    UI_TaskEveryday.m_tempAward2 = nil
    UI_TaskEveryday.m_tempAward3 = nil
    UI_TaskEveryday.m_awards1 =nil
    UI_TaskEveryday.m_awards2 = nil
    UI_TaskEveryday.m_awards3 = nil
    UI_TaskEveryday.m_jiantou1 = nil
    UI_TaskEveryday.m_jiantou2 =nil
    UI_TaskEveryday.m_jiantou3 = nil
    UI_TaskEveryday.m_taskList = nil
end

function UI_TaskEveryday.AddListeners()
    --播放开箱动画
    --CS.EventCtrl.inst:LuaAddEventListener("EVENT_OPEN_TTANSITION","int" ,UI_TaskEveryday.OpenTransition)

end

function UI_TaskEveryday.RemoveListeners()
    --CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_REFRESH_REDHINT","int" , UI_TaskEveryday.OpenTransition);
end
--[[
function UI_TaskEveryday.OpenTransition(num)
    UI_TaskEveryday.m_jinbi_num.text =num
    CS.GameMsgHint.inst:CanClickScreen(false);
    UI_TaskEveryday.m_kaisuo:Play(function () CS.GameMsgHint.inst:CanClickScreen(true) end)
end]]
--[[
---刷新任务列表
function UI_TaskEveryday.RefreshTaskList()
    --UI_TaskEveryday.m_task_list.itemPool.Clear();
    --UI_TaskEveryday.m_task_list.scrollPane.ScrollTop();--设置循环列表
    --   if  ~TaskEverydayModel.isOpen then
    --       print("每日任务没有开启")
    --       return
    --   end

    UI_TaskEveryday.m_keynum.text = TaskEverydayModel.keyCount
    TaskEverydayModel.Finishedtask = 0
    -- c# Call Lua
    UI_TaskEveryday.m_task_list.itemRenderer = function(index, item)
        local task = Com_Task.new(item)--不同于c#的手动构造
        print(sstring.Format(CS.GUIHelper.ParseStringTable(TaskEverydayModel.tasklist[index+1].taskLanguage),tostring(TaskEverydayModel.tasklist[index+1].taskTarget)))
       -- CS.SDKManager.inst:AndroidLog(sstring.Format(CS.GUIHelper.ParseStringTable(TaskEverydayModel.tasklist[index+1].taskLanguage),tostring(TaskEverydayModel.tasklist[index+1].taskTarget)))
        --虽然语言表去掉了{}，但是我还是可以这样写...
        task.m_task_miaoshu.text = sstring.Format(CS.GUIHelper.ParseStringTable(TaskEverydayModel.tasklist[index+1].taskLanguage),tostring(TaskEverydayModel.tasklist[index+1].taskTarget))
        task.m_wancheng_num.text = tostring(TaskEverydayModel.tasklist[index+1].taskStep)
        task.m_mubiao_num.text = "/"..tostring(TaskEverydayModel.tasklist[index+1].taskTarget)
        task.m_kaishi_button.onClick:Add(function() UI_TaskEveryday.DisposeTask(TaskEverydayModel.tasklist[index+1].taskType) end)
        if TaskEverydayModel.tasklist[index+1].taskStep >= TaskEverydayModel.tasklist[index+1].taskTarget then
            task.m_task.selectedIndex= 1
            task.com.onClick:Clear()
            TaskEverydayModel.Finishedtask  = TaskEverydayModel.Finishedtask +1
            if TaskEverydayModel.Finishedtask >= 3 then UI_TaskEveryday.m_go.selectedIndex = 1 return end
        end
        --UI_TaskEveryday.m_go.selectedIndex = 1
    end

    UI_TaskEveryday.m_task_list.numItems = TaskEverydayModel.tasklist:Count();
    --开箱引导
    if TaskEverydayModel.keyCount >= 1 then CS.GuideSystem.inst:StartGuide(CS.GuideSystem.SystemType.Custom, 16) end
    --CS.GuideSystem.inst:StartGuide(CS.GuideSystem.SystemType.Custom, 16)

end
]]
function UI_TaskEveryday.OnHide()
    TaskEverydayModel.isTaskOPen = false
    UI_TaskEveryday:OnAlObjectGC()
end

---每日任务点击
function UI_TaskEveryday.StartTask(type)

    local Switch = {
        --主线关卡
        [1] = function()
            UI_MainCity.LevelBtnOnClick()
        end
        --挑战自定义关卡
    ,  [2] = function()
            --UI_MainCity:UGCBtnOnClick()
            --UGCModel.getInstance().model:SetTabState(2)

            CS.UILuaWindowBase.HideWindow("UI_TaskEveryday")
            local win= CS.UIWindowViewManager.ShowWindowByLua("UI_CutScene")
            if win then
                win:setShowType(4)
            end
            local co1 = coroutine.create(function()
                yield_return(CS.UnityEngine.WaitForSeconds(0.02))
                CS.UILuaWindowBase.ShowWindow("UI_UGCLevel")
                UI_UGCLevel:SeletcTab(2)
                CS.UILuaWindowBase.HideWindow("UI_MainCity")
            end )
            assert(coroutine.resume(co1))
            CS.WwiseManager.StopWwise("scene_song")
            CS.AkSoundEngine.PostEvent(CS.AK.EVENTS.SET_VOICE_VOLUME_MAIN_ALL_MIXER_CLOSE, CS.WwiseManager.AudioObj)
            --CS.UILuaWindowBase.ShowWindow("UI_UGCLevel")
        end
        --创造关卡
    ,  [3] = function()
            --UGCModel.getInstance().model:SetTabState(1)

            CS.UILuaWindowBase.HideWindow("UI_TaskEveryday")
            local win= CS.UIWindowViewManager.ShowWindowByLua("UI_CutScene")
            if win then
                win:setShowType(4)
            end
            local co1 = coroutine.create(function()
                yield_return(CS.UnityEngine.WaitForSeconds(0.02))
                CS.UILuaWindowBase.ShowWindow("UI_UGCLevel")
                UI_UGCLevel:SeletcTab(1)
                CS.UILuaWindowBase.HideWindow("UI_MainCity")
            end )
            assert(coroutine.resume(co1))
            CS.WwiseManager.StopWwise("scene_song")
            CS.AkSoundEngine.PostEvent(CS.AK.EVENTS.SET_VOICE_VOLUME_MAIN_ALL_MIXER_CLOSE, CS.WwiseManager.AudioObj)
        end
        --分享
    , [4] = function()
            if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.WindowsEditor then
                TaskEverydayModel.OnCompleteEverydayTaskRqst(4)
            end
            CS.SDKManager.inst:SDKLog(" defaultshareImage!!!!!!!!")
           --[[ ShareModel.Url = "defaultshareImage"
            CS.UILuaWindowBase.ShowWindow("UI_Share")]]
            ShareModel.Url = "defaultshareImage"
            local co1 = coroutine.create(function()
               -- print("Text  coroutine 1111")
                yield_return(CS.UnityEngine.WaitForSeconds(0.02))
                --print("Text  coroutine 22222")
                if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.WindowsEditor then
                    --CS.SDKManager.inst.jo:Call("ScreenCapture")
                    CS.UILuaWindowBase.ShowWindow("UI_Share")
                end
                if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.Android then
                    CS.UILuaWindowBase.ShowWindow("UI_Share")
                    --CS.SDKManager.inst.jo:Call("ScreenCapture")
                end

                if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer then
                    --CS.SDKIOS.txQKScreenCapture()
                    CS.UILuaWindowBase.ShowWindow("UI_Share")
                    --ShareModel.Url = "defaultshareImage.jpg"
                end
                --print("Text  coroutine 555555555555")
                yield_return(CS.UnityEngine.WaitForSeconds(0.1))
                --print("Text  coroutine 33333333")
                if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.Android then
                    --CS.UILuaWindowBase.ShowWindow("UI_Share")
                    CS.SDKManager.inst.jo:Call("ScreenCapture")
                end

                if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer then
                    CS.SDKIOS.txQKScreenCapture()
                    --CS.UILuaWindowBase.ShowWindow("UI_Share")
                    --ShareModel.Url = "defaultshareImage.jpg"
                end
            end )
            assert(coroutine.resume(co1))

        end
        --邀请
    , [5] = function()
            if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.WindowsEditor then
                TaskEverydayModel.OnCompleteEverydayTaskRqst(5)
                local friendWin = CS.UIWindowViewManager.ShowWindowByLua("UI_Friend")
                if friendWin~=nil then
                    friendWin.m_ziti.selectedIndex =1
                    friendWin.m_haoyou.selectedIndex = 2
                end
            end
            if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.Android then
                -- CS.SDKManager.inst:AndroidLog("lua：点击邀请")
                CS.SDKManager.inst.jo:Call("onClickRequestButton")
            end
            if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer then
                CS.SDKIOS.txQKRequestFriend()
            end
        end

        --赠送体力
    ,  [6] = function()
            --[[
                local getPowerWindow = CS.UIWindowViewManager.ShowWindow("UI_GetPower")
                if getPowerWindow~=nil then
                    CS.UI_GetPower:OnSendPower()
                end]]
            CS.UI_Tili.CurrentViewType = CS.UITiliViewType.SEND
            local actionWin = CS.UIWindowViewManager.ShowWindowByLua("UI_Tili")
            if actionWin~=nil then
                --actionWin.m_tiliViewController.selectedIndex = 1
                actionWin:OnOneKeySelect()
            end
            end
        --每日登陆
    ,   [7] = function()

        end
        --转转盘
    ,   [8] = function()
            UI_MainCity.OnClickLuckyDraw()
        end
        --使用道具
    ,   [9] = function()
            --CS.UILuaWindowBase.ShowWindow("UI_UGCRecommendation")
        end
        --看视频
    ,   [10] = function()
            if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.WindowsEditor then
                TaskEverydayModel.OnCompleteEverydayTaskRqst(10)
            end
        end
    }

    Switch[type]();
    --CS.UILuaWindowBase.HideWindow("UI_TaskEveryday")
end
