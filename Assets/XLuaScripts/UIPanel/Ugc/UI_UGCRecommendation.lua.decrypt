---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2019/6/10 10:14
---
UI_ComDot=classUtlis()
function UI_ComDot:ctor(panel)
    self.buttonCtrl = panel:GetController("button")
    self.buttonCtrl.selectedIndex =0
end

function UI_ComDot:SetIndex(seleIndex)
    self.buttonCtrl.selectedIndex =seleIndex
end



UI_UGCRecommendation = {}
UI_UGCRecommendation.__index = UI_UGCRecommendation
UI_UGCRecommendation.panelName = "UI_UGCRecommendation"
UI_UGCRecommendation.packageName = "Preview recommendation"
UI_UGCRecommendation.componentName = "UIRecommendation"
UI_UGCRecommendation.UIComID =33
UI_UGCRecommendation.className = 'UI_UGCRecommendation'

require("UIPanel.Ugc.UI_UGCChessBoard")
require("UIPanel.Ugc.UI_UgcClearing_cold_4")
require("UIPanel.Ugc.UI_UGCChessBoard")

function UI_UGCRecommendation.New(UIShowFunc)
    --这里等把usedata解析出来之后在来判断
    if type(UIShowFunc) == "userdata" then
        UI_UGCRecommentdation.UIShowFunc = UIShowFunc
    end
    CS.UILuaWindowBase.AddFairyGUIPackage("FreeLevel")
    CS.UILuaWindowBase.AddFairyGUIPackage("Chessboard")
    --print("Preview recommendation new")
    --CS.UILuaWindowBase.AddFairyGUIPackage("Chessboard");
    --CS.UILuaWindowBase.AddFairyGUIPackage("Preview recommendation");
    BasePanelObject.New(UI_UGCRecommendation)
    --GCUgcComLevelListRspd
    if UI_UGCRecommendation.contentPane ~= nil then
        UI_UGCRecommendation.PanelCtrl.sortingOrder = 5
        UI_UGCRecommendation.Com_Recommend = UI_UGCRecommendation.contentPane:GetChild("n15")
        UI_UGCRecommendation.Compo_ChessBoard = UI_UGCRecommendation.Com_Recommend:GetChild("Level")
        UI_UGCRecommendation.Com_ChessBoard = UI_UGCChessBoard.new(UI_UGCRecommendation.Compo_ChessBoard) --CreateSlots
        UI_UGCRecommendation.Com_ChessBoard:CreateSlots()
        UI_UGCRecommendation.List_Dot = UI_UGCRecommendation.Com_Recommend:GetChild("dotlist")
        UI_UGCRecommendation.List_Dot:RemoveChildrenToPool(0,UI_UGCRecommendation.List_Dot:GetChildren().Length)
        UI_UGCRecommendation.Title_PlayerName = UI_UGCRecommendation.Com_Recommend:GetChild("TitlePlayerName")
        UI_UGCRecommendation.Title_MoveCount = UI_UGCRecommendation.Com_Recommend:GetChild("TitleMoves")
        UI_UGCRecommendation.List_LevelTarget = UI_UGCRecommendation.Com_Recommend:GetChild("ListOrder")
        UI_UGCRecommendation.Button_close =  UI_UGCRecommendation.Com_Recommend:GetChild("Button_close")
        UI_UGCRecommendation.Ctrl_loading = UI_UGCRecommendation.Com_Recommend:GetController("loading")
        --UI_UGCRecommendation.Com_coverBg = UI_UGCRecommendation.contentPane:GetChild("CoverBG")
        --UI_UGCRecommendation.List_LevelTarget:SetVirtual()
        UI_UGCRecommendation.List_LevelTarget:RemoveChildrenToPool(0,UI_UGCRecommendation.List_LevelTarget:GetChildren().Length)
        --[[
        UI_UGCRecommendation.List_LevelTarget:RemoveChildrenToPool(0,  UI_UGCRecommendation.List_LevelTarget:GetChildren().Length)

        UI_UGCRecommendation.orders={}
        for i = 1, 2 do
            UI_UGCRecommendation.orders[i]= UI_UgcClearing_cold_4.new( UI_UGCRecommendation.List_LevelTarget:AddItemFromPool(),"","")
        end]]
        UI_UGCRecommendation.Icon_Protrait = UI_UGCRecommendation.Com_Recommend:GetChild("icon")

        UI_UGCRecommendation.Button_Play = UI_UGCRecommendation.contentPane:GetChild("button_play")
        UI_UGCRecommendation:InitInfo()
    end
    UI_UGCRecommendation:OpenPanel()
end

--初始化
function UI_UGCRecommendation:InitInfo()
    UI_UGCRecommendation.curDataIndex = 1
    UI_UGCRecommendation.curLevelInfo = {}
    UI_UGCRecommendation.begainTime=0
    UI_UGCRecommendation.begainX=0
    CS.MatchTreeProxy.inst:SetUGCLevelState(true)
    UI_UGCRecommendation:OnSwipeScreen()
    UI_UGCRecommendation.Button_Play.onClick:Set(function()

        local m_maxTime = CS.MatchTreeProxy.inst:GetTicketMaxTime()
        if m_maxTime>0 then
            UGCModel.getInstance().model:StartUGCMatchLevel(UI_UGCRecommendation.curLevelInfo)
        else
            local actionPoint = CS.MyPlayerInfo.Instance.TicketCount
            if actionPoint>0 then
                UGCModel.getInstance().model:StartUGCMatchLevel(UI_UGCRecommendation.curLevelInfo)
            else
                CS.UIWindowViewManager.ShowWindowByLua("UI_GetPower").m_menpiao.selectedIndex = 1
            end
        end

        --[[
        --UI_UGCRecommendation.Com_ChessBoard:ClearSlots()
        UI_UGCRecommendation:OnUpgradeCurDataIndex()
        --UI_UGCRecommendation.Com_ChessBoard:CreateSlots()
        UI_UGCRecommendation:OnRqstSearchLevelInfo(UI_UGCRecommendation.curDataIndex)]]
    end)
    --[[
    UI_UGCRecommendation.Com_coverBg.onClick:Add(function()
        CS.MatchTreeProxy.inst:SetUGCLevelState(false)
    end)]]
    UI_UGCRecommendation.Button_close.onClick:Set(UI_UGCRecommendation.OnClickCloseButton)
    UI_UGCRecommendation:OnRqstSearchLevelInfo(UI_UGCRecommendation.curDataIndex)
end

function UI_UGCRecommendation:OnClickCloseButton()
    CS.UILuaWindowBase.HideWindow("UI_UGCRecommendation")
    CS.MatchTreeProxy.inst:SetUGCLevelState(false)
    UGCModel.getInstance().model:ClearData()
end

function UI_UGCRecommendation:OnUpgradeCurDataIndex(isRight)
    local recommendationInfoUp = UGCModel.getInstance().model:GetRecommondLevelInfoList()
    if recommendationInfoUp then
        if isRight then
            UGCModel.getInstance().model:SubCurRecommondIndex()
        else
            UGCModel.getInstance().model:AddCurRecommondIndex()
        end
      --  print("UI_UGCRecommendation.curDataIndex:"..tostring(UI_UGCRecommendation.curDataIndex))
        --print("当前index:"..tostring(UGCModel.getInstance().model:GetCurRecommondIndex()))
        if  UGCModel.getInstance().model:GetLastRecommondIndex()~=UGCModel.getInstance().model:GetCurRecommondIndex()  then
            UI_UGCRecommendation:OnRqstSearchLevelInfo(UGCModel.getInstance().model:GetCurRecommondIndex())
            UGCModel.getInstance().model:SetLastRecommondIndex(UGCModel.getInstance().model:GetCurRecommondIndex())
        end
    end
end
--刷新原点
function UI_UGCRecommendation:OnRefreshDotItem()

end

function UI_UGCRecommendation:SetCurLoadingState(loadingState)
    UI_UGCRecommendation.Ctrl_loading.selectedIndex = loadingState
end

function UI_UGCRecommendation:SetChessBoardVisible(isVisible)
    if UI_UGCRecommendation.Compo_ChessBoard then
        UI_UGCRecommendation.Compo_ChessBoard.visible = isVisible
    end
end

function UI_UGCRecommendation:OnRqstSearchLevelInfo(indexLevel)
    local recommendationInfo = UGCModel.getInstance().model:GetRecommondLevelInfoList()
    --print("UI_UGCRecommendation==recommendationInfoLevelId:"..tostring(recommendationInfo[indexLevel].levelId))
    --print(recommendationInfo[indexLevel].levelId)
    if recommendationInfo then
       -- print("indexLevel:"..indexLevel)
        UGCModel.getInstance().model:GetUgcLevelSearchRqst(tostring(recommendationInfo[indexLevel].levelId))
    end
end

--刷新推荐关卡玩家信息
function UI_UGCRecommendation:FlushInfo(levelInfo,levelIndex,isSync,boardFinishCallback,isCo)
    UI_UGCRecommendation.curDataIndex=levelIndex
    UI_UGCRecommendation.Com_ChessBoard:SetVisible(false)
    UI_UGCRecommendation:SetCurLoadingState(1)
    if levelInfo and  UI_UGCRecommendation.curLevelInfo~=levelInfo then
        UI_UGCRecommendation.curLevelInfo=levelInfo
        local levelProfile=levelInfo.levelProfile
         UI_UGCRecommendation.Com_ChessBoard:FlushInfo(levelInfo.levelID,levelInfo.slotsItemsCfg,levelProfile.width,levelProfile.height,isSync,boardFinishCallback,isCo,
                 function () end)
        --print("targetCount"..tostring(levelProfile.targetCount))


        UI_UGCRecommendation.List_LevelTarget.itemRenderer = function(index,item)
           -- print(index)
            local singleItem = UI_UgcClearing_cold_4.new(item,"","")
            if index<levelProfile.targetCount then
                if levelProfile.targets[index+1]~="None" then
                  --  print(levelProfile.targets[index+1])
                    local target=UGCItemConfigManager.getInstance().GetTarget(levelProfile.targets[index+1],levelProfile.colorIds[index+1])
                    singleItem:FlushInfo(target.icon,levelProfile.targetCountTotal[index+1])
                end
            else
                singleItem:FlushInfo("","")
            end
           -- singleItem.icon.url =
            --singleItem:FlushInfo(singleItem.icon.url,singleItem.title.text)
        end
        UI_UGCRecommendation.List_LevelTarget.numItems = levelProfile.targetCount
        UI_UGCRecommendation.List_Dot.itemRenderer = function(index1,item1)
            local singleDot = UI_ComDot.new(item1)
            if  UGCModel.getInstance().model:GetCurRecommondIndex()== (index1+1) then
                singleDot:SetIndex(1)
            else
                singleDot:SetIndex(0)
            end
        end
        UI_UGCRecommendation.List_Dot.numItems = #UGCModel.getInstance().model:GetRecommondLevelInfoList()
        --  print(levelProfile.limit)
        UI_UGCRecommendation.Title_MoveCount.text=tostring(levelProfile.limit)
        UI_UGCRecommendation.Title_PlayerName.text=levelInfo.ownerRoleName
        UI_UGCRecommendation.Icon_Protrait.icon=""
        local uiItem = CS.ItemSystem.inst:GetUIItemByID(levelInfo.ownerPortraitID);
        if uiItem then
            UI_UGCRecommendation.Icon_Protrait.icon=uiItem.Icon
        end
       -- print("!!!!!!!!!!!!!!!!")
    end
end

function UI_UGCRecommendation:OnCreateChessBoardFinishCallBack()
    UI_UGCRecommendation:SetCurLoadingState(0)
    UI_UGCRecommendation.Com_ChessBoard:SetVisible(true)
end

function UI_UGCRecommendation:OnAutoRefreshLevel(isRight)
    UI_UGCRecommendation:OnUpgradeCurDataIndex(isRight)
end

function UI_UGCRecommendation.OnRefreshUI(index)
   -- print("UI_UGCRecommendation Index:"..index)
    local recommondInfoList = UGCModel.getInstance().model:GetFullRecommondLevelInfo()
    --print("recommendationInfo:"..#recommondInfoList)
    --print(recommondInfoList[1].levelID)
    index =1
    UI_UGCRecommendation:FlushInfo(recommondInfoList[index],index,true,UI_UGCRecommendation.OnCreateChessBoardFinishCallBack ,true)
end
--[[
function UI_UGCRecommendation:OnRefreshLevelInfo()
    print("Refresh Level Info!!!")
    UI_UGCRecommendation.Title_PlayerName.title = "Bob"
    UI_UGCRecommendation.Title_MoveCount.title = "25"
    UI_UGCRecommendation.Icon_Protrait.url = "ui://bp75n6h1vrpb1"
end]]
function UI_UGCRecommendation:OnSwipeScreen()
    UI_UGCRecommendation.swaipeObj = FairyGUI.SwipeGesture(UI_UGCRecommendation.Compo_ChessBoard)
    --print("------ UI_UGCRecommendation.swaipeObj -----------")
    UI_UGCRecommendation.swaipeObj.onBegin:Set(function (context)
        --print("context.inputEvent.x:"..tostring(context.inputEvent.x))
        UI_UGCRecommendation.begainTime=CS.UnityEngine.Time.unscaledTime
        UI_UGCRecommendation.begainX=context.inputEvent.x
    end)
    UI_UGCRecommendation.swaipeObj.onEnd:Set(function (context)
        if CS.UnityEngine.Time.unscaledTime-UI_UGCRecommendation.begainTime>0.04 then
            local distance= math.abs(UI_UGCRecommendation.begainX-context.inputEvent.x)
           -- print(distance)
            if distance>1 and distance<500 then
                if context.inputEvent.x - UI_UGCRecommendation.begainX>0 then
                    UI_UGCRecommendation:OnAutoRefreshLevel(true)
                else
                    UI_UGCRecommendation:OnAutoRefreshLevel(false)
                end
            end
        end
    end)
end

--GC
function UI_UGCRecommendation:OnAllWinObjectGC()
    UI_UGCRecommendation.Com_ChessBoard:Dispose()
    UI_UGCRecommendation.Com_Recommend = nil
    UI_UGCRecommendation.Compo_ChessBoard = nil
    UI_UGCRecommendation.Com_ChessBoard = nil
    UI_UGCRecommendation.List_Dot = nil
    UI_UGCRecommendation.Title_PlayerName = nil
    UI_UGCRecommendation.Title_MoveCount = nil
    UI_UGCRecommendation.List_LevelTarget = nil
    UI_UGCRecommendation.Icon_Protrait = nil
    UI_UGCRecommendation.Button_Play = nil
   -- UI_UGCRecommendation.Com_coverBg = nil
    UI_UGCRecommendation.Button_close = nil
    UI_UGCRecommendation.Ctrl_loading = nil
end

function UI_UGCRecommendation:OpenPanel()
    self:OpenPanelBase()
end

function UI_UGCRecommendation:ClosePanel()
    self:ClosePanelBase()
    --[[
    UI_UGCRecommendation:OnAllWinObjectGC()
    UI_UGCRecommendation.Com_ChessBoard:Dispose()
    UGCModel.getInstance().model:ClearData()
    CS.MatchTreeProxy.inst:SetUGCLevelState(false)]]
end

function UI_UGCRecommendation.OnHide()
    UI_UGCRecommendation:OnAllWinObjectGC()
end

function UI_UGCRecommendation.AddListeners()
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_UGC_REFRESHRECOMMONDUI","int",UI_UGCRecommendation.OnRefreshUI)
end

function UI_UGCRecommendation.RemoveListeners()
    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_UGC_REFRESHRECOMMONDUI","int",UI_UGCRecommendation.OnRefreshUI)
end