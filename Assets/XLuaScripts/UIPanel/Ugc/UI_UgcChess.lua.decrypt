---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2018/11/12 20:25
---
UI_UgcChess=classUtlis()
function UI_UgcChess:ctor(items,x,y,callBackClick,callBackTouchBegin,callBackTouchEnd,callBackRollOver,callBackLongPress)
    self.items=items
    self.x=x
    self.y=y
    self.coord={}
    self.coord.x=x
    self.coord.y=y
    self.itemCfgs={}
    self.giftBlockGeneratorCfg={}
    self.itemTypeCfgs={}
    self.isSlotActive=false
    self.isFirefly=false
    self.isNotSrcFirefly=true
    self.srcFirefly=nil
    self.isCanEditor=true
  --  self.chessLayer = self.item:GetController("ChessLayer")
    self.sign=self.items[6]:GetChild("Remove")
    self.sign.visible=false
    self.signFlag=0
 --   self.chessLayer.selectedIndex=1
    self.chessBoard = self.items[1]
    self.chessBoard.visible=false
    self.chessBoardLoaders={}
    self.jamBoard=self.items[2]:GetChild("Jam")
    self.jamBoard.visible=false
    self.jamBoardLoaders={}
    self.honeyBoard=self.items[5]:GetChild("Honey")
    self.honeyBoard.visible=false
    self.honeyBoardLoaders={}
    self.images={}
    for i =2, 5 do
        self.images[i]={}
        local qz = self.items[i]
        self.images[i][1]=qz:GetChild("ceng1")
        self.images[i][2]=qz:GetChild("ceng2")
        if  self.images[i][1] then
            self.images[i][1].visible=false
        end

        if  self.images[i][2] then
            self.images[i][2].visible=false
        end

    end
    ---第三层拓展
    self.BearIconParent=self.items[3]:GetChild("BearIcon")
    self.BearIcon_down=nil
    self.BearIcon_right=nil
    ---第四层拓展
    self.fireflyParent=self.items[4]
    self.firefly=nil
    ---第五层拓展
    self.walls={}
    self.wallParent=self.items[5]:GetChild("Wall")
    self.tipController = self.items[6]:GetController("BanAndPitchOn")
    self.errorTip = self.items[6]:GetTransition("Error")
    if callBackClick then
    self.items[4].onClick:Set(function ()
        callBackClick(self)
    end )
    end

    if callBackTouchBegin then
        self.items[4].onTouchBegin:Set(function()
            callBackTouchBegin(self)
        end)
    end

    if callBackTouchEnd then
        self.items[4].onTouchEnd:Set(function()
            callBackTouchEnd(self)
        end)
    end

    if callBackRollOver then
        self.items[4].onRollOver:Set(function()
            callBackRollOver(self)
        end)
    end
    self.callBackLongPress=callBackLongPress
end

function UI_UgcChess:SetSlots(slots)
    self.slots=slots
end

function UI_UgcChess:Dispose()
    for i, v in pairs(self.items) do
        self.items[i]=nil
    end
    self.items=nil
    self.x=nil
    self.y=nil
    self.coord=nil
    for i, v in pairs(self.itemCfgs) do
        self.itemCfgs[i]=nil
    end
    self.itemCfgs=nil
    self.giftBlockGeneratorCfg=nil
    for i, v in pairs(self.itemTypeCfgs) do
        self.itemTypeCfgs[i]=nil
    end
    self.itemTypeCfgs=nil
    self.isSlotActive=nil
    self.isFirefly=nil
    self.isNotSrcFirefly=nil
    self.srcFirefly=nil
    self.isCanEditor=nil
    self.signFlag=nil
    self.sign=nil
    self.chessBoard=nil
    self.jamBoard=nil
    self.honeyBoard=nil
    for i, v in pairs(self.chessBoardLoaders) do
        if v then
            v:Dispose()
        end
        self.chessBoardLoaders[i]=nil
        end
    self.chessBoardLoaders=nil
    for i, v in pairs(self.jamBoardLoaders) do
        if v then
            v:Dispose()
        end
        self.jamBoardLoaders[i]=nil
    end
    self.jamBoardLoaders=nil
    for i, v in pairs(self.honeyBoardLoaders) do
        if v then
            v:Dispose()
        end
        self.honeyBoardLoaders[i]=nil
    end
    self.honeyBoardLoaders=nil
    for i =2, 5 do
        if  self.images[i][1] then
            self.images[i][1]:Dispose()
            self.images[i][1]=nil
        end
        if  self.images[i][2] then
            self.images[i][2]:Dispose()
            self.images[i][2]=nil
        end
        self.images[i]=nil
    end
    self.images=nil
    self.BearIconParent=nil
    self.BearIcon_down=nil
    self.BearIcon_right=nil
    self.fireflyParent=nil
    self.wallParent=nil
    if  self.walls["Bottom"] then
        self.walls["Bottom"]=nil
    end
    if self.walls["Left"] then
        self.walls["Left"]=nil
    end
    self.walls=nil
    self.tipController=nil
    self.errorTip=nil
    if  self.longpress then
        self.longpress:Dispose()
        self.longpress=nil
    end
    self.slots=nil
    self.callBackLongPress=nil
end

function UI_UgcChess:Init(itemcfgs,isEditor)
    if  self.chessBoard and self.chessBoard.displayObject and self.chessBoard.displayObject.gameObject then
       -- self:Reset()
        self.isEditor=isEditor
        if self.isEditor and not self.longpress then
            self.longpress=FairyGUI.LongPressGesture(self.items[4])
            self.longpress.once=true
            self.longpress.onAction:Set(function ()
                local itemBlock= self.itemCfgs[4]
                if itemBlock and itemBlock.name=="GiftBlock" then
                    self.callBackLongPress(self,self.items[4])
                end
            end)
        end
        if itemcfgs then
            if itemcfgs.slotCfg then
                for i, v in pairs(itemcfgs.slotCfg) do
                    if v then
                        if v.name=="Firefly" then
                            if  itemcfgs.isNotSrcFirefly==false then
                                self.isNotSrcFirefly=itemcfgs.isNotSrcFirefly
                                self:SetChessItem(v.layerID,v)
                            end
                        else
                            self:SetChessItem(v.layerID,v)
                        end

                    end
                end
            end
            if itemcfgs.giftBlockGeneratorCfg then
                self.giftBlockGeneratorCfg=itemcfgs.giftBlockGeneratorCfg
            end
        end
    end
    if    not self.isEditor then
        self:SetNearWall(1,self,self.slots)
    end

end

function UI_UgcChess:Reset(isUndo)



    if isUndo then
        for i,itemCfg in pairs(self.itemCfgs) do
            if itemCfg.type=="SlotsBefore" then
                self:ClearLayerByName( itemCfg.name, itemCfg.color)
            else
                self:ClearLayerByID(itemCfg.layerID)
            end
        end
    else
        for i =2, 5 do
            self:SetLayerIcon(self.images[i],1,nil)
            self:SetLayerIcon(self.images[i],2,nil)
        end
        for i, v in pairs(self.chessBoardLoaders) do
            if v then
                v:Dispose()
                self.chessBoardLoaders[i]=nil
            end
        end
        for i, v in pairs(self.jamBoardLoaders) do
            if v then
                v:Dispose()
                self.jamBoardLoaders[i]=nil
            end
        end
        for i, v in pairs(self.honeyBoardLoaders) do
            if v then
                v:Dispose()
                self.honeyBoardLoaders[i]=nil
            end
        end
        if self.isNotSrcFirefly==false then
            self:ClearNearFirefly(self.slots)
            self:ClearFirefly()
        end

        if self.BearIcon_down then
            self.BearIcon_down:Dispose()
            self.BearIcon_down=nil
        end
        if self.BearIcon_right then
            self.BearIcon_right:Dispose()
            self.BearIcon_right=nil
        end
        if  self.walls["Bottom"] then
            self.walls["Bottom"]:Dispose()
            self.walls["Bottom"]=nil
        end
        if self.walls["Left"] then
            self.walls["Left"]:Dispose()
            self.walls["Left"]=nil
        end
        if  self.firefly then
            self.firefly:Dispose()
            self.firefly=nil
        end
    end

    self.isSlotActive=false
    self.isNotSrcFirefly=true
    self.itemCfgs={}
    self.itemTypeCfgs={}

end

---设置标记
function UI_UgcChess:SetSign(index)
    self.signFlag=0
   if index == 1 then
        local haveRmove=false
        for i, v in pairs(self.itemCfgs) do
            if v and v.layerID~=1 then
                haveRmove=true
            end
        end
        if haveRmove==false then
            if self.isSlotActive then
                haveRmove=true
            end
        end
         if haveRmove then
             self.signFlag=index
        end
    end
    if  self.signFlag==1 then
        self.sign.visible=true
    else
        self.sign.visible=false
    end


end


function UI_UgcChess:CheckChessCurTypeCfg(keyItemCfg,itemCfg)
    ---检查当前棋子和指定配置是否相同
    if keyItemCfg then
        local targetChess=self
        local cfgKey=keyItemCfg.layerID
        if keyItemCfg.type=="SlotsBefore" then
            cfgKey=keyItemCfg.name
            if keyItemCfg.name=="Wall"then
                cfgKey=cfgKey.. UGCUtils.GetWallSide(keyItemCfg.color)
                local tempSide=UGCUtils.straightSides[keyItemCfg.color]
                if  keyItemCfg.color==1 or keyItemCfg.color==3 then
                    targetChess=self:GetNearChess(tempSide,self.slots)
                    if itemCfg then
                        itemCfg=self:GetBoardWallCfg(tempSide)
                    end
                end
            end
        end
        if targetChess and targetChess.itemCfgs[cfgKey]==itemCfg then
            return true
        end
    end
    return false
end


function UI_UgcChess:SetChessItem(layerID,itemCfg)
    if itemCfg  then
        ---相同类型只能共存一个
        if self.itemTypeCfgs[itemCfg.type] and self.itemTypeCfgs[itemCfg.type].name~=itemCfg.name then
            self:ClearLayerByID(self.itemTypeCfgs[itemCfg.type].layerID)
        end
        if itemCfg.type=="SlotsBefore" then
            self:SetLayerByName(itemCfg.name,itemCfg)
        else
            self:SetLayerByID(layerID,itemCfg)
        end


    end
end

function UI_UgcChess:ClearChessItem(layerID,itemName,itemType,itemPara)
    if itemType=="SlotsBefore" then
        self:ClearLayerByName(itemName,itemPara)
    else
        if self.itemCfgs[layerID] and self.itemCfgs[layerID].name==itemName then
            self:ClearLayerByID(layerID)
        end
    end
end

function  UI_UgcChess:SetLayerIcon(layerIcons,layerIndex,iconPath)
    if layerIcons then
        local layerIcon=layerIcons[layerIndex]
        if  layerIcon then
            if iconPath then
                layerIcon.visible=true
                layerIcon.url=iconPath
            else
                layerIcon.visible=false
                layerIcon.url=""
            end
        end
    end
end
---设置层按层ID
function  UI_UgcChess:SetLayerByID(layerID,itemCfg)
    if itemCfg then
        local isSetIcon=true
        if  self.itemCfgs[layerID] then
            self.itemTypeCfgs[self.itemCfgs[layerID].type]=nil
        end
        self.itemCfgs[layerID]=itemCfg
        self.itemTypeCfgs[itemCfg.type]=itemCfg
        if itemCfg.name=="SlotEmpty" then
            self.isSlotActive=true
            if   self.isEditor then
                self:SetNearWall(1,self,self.slots)
            end
            isSetIcon=false
        elseif itemCfg.name=="Honey" or  itemCfg.name=="HoneyBear" then
            self:SetNearWall(2,self,self.slots)
        elseif itemCfg.name=="Firefly" then
            self:SetFirefly(itemCfg,self,false,true)
            self:SetNearFirefly(itemCfg,self.slots)
            isSetIcon=false
        end
        if isSetIcon then
            local layerIcons=self.images[layerID]
            if layerIcons then
                if itemCfg.name~="Honey"or itemCfg.level>1  then
                    self:SetLayerIcon(layerIcons,1,itemCfg.path1)
                    self:SetLayerIcon(layerIcons,2,itemCfg.path2)
                else
                    self:SetLayerIcon(layerIcons,1,nil)
                    self:SetLayerIcon(layerIcons,2,nil)
                end
            end
        end
    end

end

---设置层按名称
function  UI_UgcChess:SetLayerByName(name,itemCfg)
    if itemCfg then
        local key=itemCfg.name
        local targetChess=self
       if name=="Jam" then
            targetChess.itemCfgs[itemCfg.name]=itemCfg
            self:SetNearWall(3,self,self.slots)
        elseif name=="Wall"then
                local tempSide=UGCUtils.straightSides[itemCfg.color]
                local wallSide=UGCUtils.GetWallSide(itemCfg.color)
                key=key..wallSide
                if itemCfg.color==1 or itemCfg.color==3 then
                    self.itemCfgs[itemCfg.name..tempSide]=itemCfg
                    targetChess=self:GetNearChess(tempSide,self.slots)
                    itemCfg=self:GetBoardWallCfg(tempSide)
                end
                if targetChess and targetChess.isSlotActive then
                    targetChess:SetBoardWall(wallSide,itemCfg)
                end
        elseif name == "Bear" then
           if itemCfg.color==2 then
               if  self.BearIcon_down==nil then
                   self.BearIcon_down=UIPackage.CreateObject("Chessboard","BearIcon_up")
                   self.BearIconParent:AddChild(  self.BearIcon_down)
                   self.BearIcon_down.x=2
                   self.BearIcon_down.y=4

               end
           elseif itemCfg.color==3  then
               if  self.BearIcon_right==nil then
                   self.BearIcon_right=UIPackage.CreateObject("Chessboard","BearIcon_left")
                   self.BearIconParent:AddChild(  self.BearIcon_right)
                   self.BearIcon_right.x=4
                   self.BearIcon_right.y=2
               end
           end
        end
        if targetChess then
            targetChess.itemCfgs[key]=itemCfg
        end
    end
end

---清除层按层ID
function  UI_UgcChess:ClearLayerByID(layerID)
    local itemCfg= self.itemCfgs[layerID]
    local isClearIcon=true
    if itemCfg then
        local isHaveOther=false
        if itemCfg.name=="SlotEmpty" then
            for i, v in pairs(self.itemCfgs) do
                if v and v.layerID~=1 then
                    isHaveOther=true
                    break
                end
            end
        end
        if isHaveOther==false then
            self.itemCfgs[layerID]=nil
            self.itemTypeCfgs[itemCfg.type]=nil
        end
        if itemCfg.name=="SlotEmpty" then
            if isHaveOther==false then
                self.isSlotActive=false
                self:SetNearWall(1,self,self.slots)
            end
            isClearIcon=false
        elseif itemCfg.name=="Honey" or  itemCfg.name=="HoneyBear" then
            self:SetNearWall(2,self,self.slots)
        elseif itemCfg.name=="Firefly" then
            self:ClearNearFirefly(self.slots)
            isClearIcon=false
        end
    end
    if isClearIcon then
        local layerIcons=self.images[layerID]
        if layerIcons then
            self:SetLayerIcon(layerIcons,1,nil)
            self:SetLayerIcon(layerIcons,2,nil)
        end
    end

end

---清除层按名称
function  UI_UgcChess:ClearLayerByName(name,para)
    local tempKey=name
    local targetChess=self
    if name=="Wall" then
        tempKey=tempKey..UGCUtils.GetWallSide(para)
        local tempSide=UGCUtils.straightSides[para]
        if para==1 or para==3 then
            local itemCfg= self.itemCfgs[name..tempSide]
            if itemCfg then
                self.itemTypeCfgs[itemCfg.type]=nil
                self.itemCfgs[name..tempSide]=nil
            end
            targetChess=self:GetNearChess(tempSide,self.slots)
        end
    end
    if targetChess then
        local itemCfg= targetChess.itemCfgs[tempKey]
        if itemCfg then
            targetChess.itemCfgs[tempKey]=nil
            targetChess.itemTypeCfgs[itemCfg.type]=nil
        end
        if name=="Jam" then
            targetChess:SetNearWall(3,targetChess,targetChess.slots)
        elseif name=="Wall" then
            if targetChess.isSlotActive then
                targetChess:ClearBoardWall(para)
            end
        elseif name=="Bear" then
            if  targetChess.BearIcon_down then
                targetChess.BearIcon_down:Dispose()
                targetChess.BearIcon_down=nil
            end
            if  targetChess.BearIcon_right then
                targetChess.BearIcon_right:Dispose()
                targetChess.BearIcon_right=nil
            end
        end
    end

end
---设置挡板
function UI_UgcChess:SetBoardWall(side,itemCfg)
    if itemCfg then
        if not self.walls[side] then
            local imageName
            if side=="Left" then
                imageName="wallLeft_UI"
            else
                imageName="wallDown_UI"
            end
            self.walls[side]=UIPackage.CreateObject("Chessboard",imageName)
            self.wallParent:AddChild( self.walls[side])
            self.walls[side]:SetPivot(0.5,0.5,true)
            self.walls[side].x=56
            self.walls[side].y=56
        end
    end
end

---获取挡板
function UI_UgcChess:GetBoardWallCfg(side)
    if side=="Top" or  side=="Bottom" then
       return UGCItemConfigManager.GetItem("Wall",2,1)
    else
        return UGCItemConfigManager.GetItem("Wall",4,1)
    end
end

function UI_UgcChess:ClearBoardWall(side)
    if  self.walls[UGCUtils.GetWallSide(side)] then
        self.walls[UGCUtils.GetWallSide(side)]:Dispose()
        self.walls[UGCUtils.GetWallSide(side)]=nil
    end
end

---获取相邻的棋子
function UI_UgcChess:GetNearChess(side,slots)
       local chess
        local coord={}
        local offset=UGCUtils.SideOffset(side)
        coord.x=self.x+offset.x
        coord.y=self.y+offset.y
        if slots[coord.y+1] then
            chess=slots[coord.y+1][coord.x+1]
        end
    return chess
end

function  UI_UgcChess:SetFirefly(itemCfg,srcFirefly,isNotSrcFirefly,isFirefly)
    self:ClearLayerByID(4)
    self:ClearLayerByID(5)
    self:ClearLayerByName("Wall",1)
    self:ClearLayerByName("Wall",3)
    self.isNotSrcFirefly=isNotSrcFirefly
    self.isFirefly=isFirefly
    self.srcFirefly=srcFirefly
    self.itemCfgs[itemCfg.layerID]=itemCfg
    if itemCfg then
        self.itemTypeCfgs[itemCfg.type]=itemCfg
    end
    if self.isNotSrcFirefly==false then
        self.firefly=UIPackage.CreateObject("Chessboard","Firefly")
        self.fireflyParent:AddChild( self.firefly)
        self.firefly.x=-13
        self.firefly.y=-13
    end
end

function  UI_UgcChess:SetNearFirefly(itemCfg,slots )
    local tempside
    local coord={}
    for  i =1, 3 do
        tempside = UGCUtils.RotateSide("Right", i-1)
        local offset=UGCUtils.SideOffset(tempside)
        coord.x=self.x+offset.x
        coord.y=self.y+offset.y
        if slots[coord.y+1] then
            if slots[coord.y+1][coord.x+1] then
                local item=slots[coord.y+1][coord.x+1]
                item:SetFirefly(itemCfg,self,true,true)
            end
        end
    end
end

function  UI_UgcChess:ClearFirefly( )
    if self.isFirefly then
        if self.isNotSrcFirefly==false then
            if  self.firefly then
                self.firefly:Dispose()
                self.firefly=nil
            end
        end
        self.isNotSrcFirefly=true
        self.isFirefly=false
        self.srcFirefly=nil
        self.itemCfgs[4]=nil
        self.itemTypeCfgs["Blocks"]=nil
    end
end

function  UI_UgcChess:ClearNearFirefly(slots)
    if self.srcFirefly then
        local tempside
        local coord={}
        local tempSrcFirefly=self.srcFirefly
        for  i =1, 3 do
            tempside = UGCUtils.RotateSide("Right", i-1)
            local offset=UGCUtils.SideOffset(tempside)
            coord.x=tempSrcFirefly.x+offset.x
            coord.y=tempSrcFirefly.y+offset.y
            if slots[coord.y+1] then
                if slots[coord.y+1][coord.x+1] then
                    local item=slots[coord.y+1][coord.x+1]
                    item:ClearFirefly()
                end
            end
        end
        tempSrcFirefly:ClearFirefly()
    end

end

function  UI_UgcChess:SetNearWall(type,chess,slots )

    chess:SetAroundWall(type, slots)
    if type~=1 or   self.isEditor then
        local coord={}
        for i, v in ipairs(UGCUtils.allSides) do
            local offset=UGCUtils.SideOffset(v)
            coord.x=chess.x+offset.x
            coord.y=chess.y+offset.y
            local slot=UGCUtils.CheckInSlotList(coord,slots)
            if slot then
                slot:SetAroundWall(type, slots)
            end
        end
    end
end



---激活底槽
function UI_UgcChess:SetSlotActive(isActive)
    self.isSlotActive=isActive
end

---设置底槽
----type 1.底槽 2.蜂蜜 3.绿草地
function  UI_UgcChess:SetAroundWall(type,slots)
    local boardLoaders=self.chessBoardLoaders
    local boardIndex=UGCUtils.boardIndex
    local imagePreName=""--"ui://Chessboard/"
    local imageName
    local parentBoard=  self.chessBoard
    local offsetX=112
    local offsetY=112
    if type==2 then
        boardLoaders=self.honeyBoardLoaders
        imagePreName=imagePreName.."Honey_"
        self.honeyBoard.visible=true
        boardIndex=UGCUtils.honeyIndex
        parentBoard=   self.honeyBoard
        offsetX=66
        offsetY=66
    elseif type==3 then
        boardLoaders=self.jamBoardLoaders
        imagePreName=imagePreName.."Jam_"
        self.jamBoard.visible=true
        boardIndex=UGCUtils.jamIndex
        parentBoard=   self.jamBoard
        offsetX=76
        offsetY=76
    else
        imagePreName=imagePreName.."QP_"
        self.chessBoard.visible=true
    end
        if self:CheckIsTarget(type,slots,self.coord) then
            for i = 1, 4 do
                imageName=imagePreName
                local noSideInfo=self:CheckCornerInfo(type,UGCUtils.straightAroundSides[i],slots)
                imageName=imageName..UGCUtils.boardNameIndex[i]..boardIndex[noSideInfo+1]
                if  boardLoaders[i] then
                    boardLoaders[i]: Dispose()
                    boardLoaders[i]=nil
                end
                boardLoaders[i]=UIPackage.CreateObject("Chessboard",imageName)
                if  boardLoaders[i] then
                    boardLoaders[i].name="board"
                    parentBoard: AddChild( boardLoaders[i])
                    boardLoaders[i]:SetPivot(UGCUtils.pivotX[i],UGCUtils.pivotY[i],true)
                    boardLoaders[i].x=offsetX
                    boardLoaders[i].y=offsetY
                end

            end
        else
            for i = 1, 4 do
                local noSideInfo=self:CheckCornerInfo(type,UGCUtils.straightAroundSides[i],slots)
                if (type==1 and (noSideInfo==7 or noSideInfo==5)) or (type~=1 and noSideInfo==7 ) then
                    imageName=imagePreName
                    imageName=imageName..UGCUtils.boardEmptyIndex[i]
                    if  boardLoaders[i] then
                        boardLoaders[i]: Dispose()
                        boardLoaders[i]=nil
                    end
                    boardLoaders[i]=UIPackage.CreateObject("Chessboard",imageName)
                    if  boardLoaders[i] then
                        boardLoaders[i].name="board"
                        parentBoard: AddChild( boardLoaders[i])
                        boardLoaders[i]:SetPivot(UGCUtils.pivotX[i],UGCUtils.pivotY[i],true)
                        boardLoaders[i].x=offsetX
                        boardLoaders[i].y=offsetY
                    end
                else
                    if  boardLoaders[i] then
                        boardLoaders[i]: Dispose()
                        boardLoaders[i]=nil
                    end
                end
            end
        end

end

---检查边角相邻槽的信息
function UI_UgcChess:CheckCornerInfo(type,startSide,slots)

    local noSideInfo = 0
    local tempside
    for  i =1, 3 do
        tempside = UGCUtils.RotateSide(startSide, i-1)
        local coord={}
        local offset=UGCUtils.SideOffset(tempside)
        coord.x=self.x+offset.x
        coord.y=self.y+offset.y
        if self:CheckIsTarget(type,slots, coord) then
           noSideInfo =noSideInfo+ CustomUtils.pow(2,i-1)
        end

    end
    return noSideInfo;
end

---检查是否该坐标下是否是目标对象
----type 1.底槽 2.蜂蜜 3.绿草地
function UI_UgcChess:CheckIsTarget(type,slots,coord)
    if slots[coord.y+1] then
        if slots[coord.y+1][coord.x+1] then
            local item=slots[coord.y+1][coord.x+1]
            if type==1  then
                if item.isSlotActive then
                    return true
                else
                    return false
                end
             elseif type==2 then
                local block= item.itemTypeCfgs["Blocks"]
                if block and (block.name=="Honey" or block.name=="HoneyBear")  then
                    return true
                else
                    return false
                end
             elseif type==3 then
                if  item.itemCfgs["Jam"]  then
                    return true
                else
                    return false
                end
            end
        end
    end
    return false
end

function UI_UgcChess:LayerBtnOnClick()

end

----检查出了底板之外没有任何东西
function UI_UgcChess:IsSlotEmpty()
    for i, v in pairs(self.itemCfgs) do
        if v and v.layerID~=1 then
             return false
        end
    end
    return true
end

function UI_UgcChess:ChessRemove()
    if self.sign.visible then
        local haveRmove=false
        for i, v in pairs(self.itemCfgs) do
            if v and v.layerID~=1 then
                haveRmove=true
                self:ClearChessItem(v.layerID,v.name,v.type,v.color)
            end
        end
        if haveRmove==false then
            if self.isSlotActive then
                self.itemCfgs[1]=nil
                self.isSlotActive=false
                self:SetNearWall(1,self,self.slots)
            end
        end
        self:SetSign(1)
    end
end

function UI_UgcChess:CheckBearCanEditor(targetCfg)
    self.isCanEditor=false
    if self.isSlotActive and  not self:CheckHaveInCfg( targetCfg.name, targetCfg.color, targetCfg.level)then
        local nearChess=self:GetNearChess(UGCUtils.straightSides[targetCfg.color],self.slots)
        if nearChess and nearChess.isSlotActive then
            self.isCanEditor=true
        end
    end
end

function UI_UgcChess:CheckSlotCanEditor()
    if self.isSlotActive then
        self.isCanEditor=false
    else
        self.isCanEditor=true
    end
end

function UI_UgcChess:CheckLayerCanEditor(targetCfg)
    if self.isFirefly then
        if  targetCfg.name~="Firefly" then
            self.isCanEditor=false
            return
        end
    end
    if (self.isSlotActive and  not self:CheckHaveInCfg( targetCfg.name, targetCfg.color, targetCfg.level) )  then
        if targetCfg.layerType==4 then
            self.isCanEditor=false
            for i, v in pairs(self.itemCfgs) do
                if v then
                    if v.layerType==2 then
                        self.isCanEditor=true
                        break
                    end
                end
            end
        elseif targetCfg.layerType==3 then
            self.isCanEditor=true
            for i, v in pairs(self.itemCfgs) do
                if v then
                    if v.layerType==4 then
                        self.isCanEditor=false
                        break
                    end
                end
            end
        else
            self.isCanEditor=true
        end
    else
        self.isCanEditor=false
    end
end

function UI_UgcChess:CheckFireflyCanEditor()
    if  self.isSlotActive then
        local tempside
        local coord={}
        local tempSrcFirefly=self.srcFirefly
        if tempSrcFirefly==nil then
            tempSrcFirefly=self
        end
        local fireflySlots={}
        if tempSrcFirefly.isSlotActive==true then
            --     print("canEditor isSlotActive"..self.x.."_"..self.y)
            table.insert(fireflySlots,tempSrcFirefly)
        end
        for  i =1, 3 do
            tempside = UGCUtils.RotateSide("Right", i-1)
            local offset=UGCUtils.SideOffset(tempside)
            coord.x=tempSrcFirefly.x+offset.x
            coord.y=tempSrcFirefly.y+offset.y
            if self.slots[coord.y+1] then
                if self.slots[coord.y+1][coord.x+1] then
                    local item=self.slots[coord.y+1][coord.x+1]
                    if item.isSlotActive==true then
                        table.insert(fireflySlots,item)
                    end
                end
            end
        end
        local slotsLength=0
        for i, v in pairs(fireflySlots) do
            if v.isFirefly==false then
                slotsLength=slotsLength+1
            end
        end
        --   print("canEditor"..self.x.."_"..self.y.."==="..slotsLength)
        self.isCanEditor=slotsLength==4
        return fireflySlots
    else
        self.isCanEditor=false
        return nil
    end

end

function UI_UgcChess:CheckWallCanEditor(targetCfg)
    if self.isSlotActive==false then
        self.isCanEditor=false
        return false
    end
    if self.isFirefly then
        self.isCanEditor=false
        return
    end
    local targetChess
    local tempSide=UGCUtils.straightSides[targetCfg.color]
    local keySide=tempSide
    if UGCUtils.IsHorizontalSide(tempSide)then
        keySide="Left"
    else
        keySide="Bottom"
    end

    if targetCfg.color==1 or targetCfg.color==3 then
        targetChess=self:GetNearChess(tempSide,self.slots)
    else
        targetChess=self
    end

    if targetChess then
        if targetChess.isSlotActive==false then
            self.isCanEditor=false
            return false
        end
        if targetChess.itemCfgs["Wall"..keySide] then
            self.isCanEditor=false
            return false
        else
            if tempSide=="Bottom" or tempSide=="Left" then
                local nearCh=targetChess:GetNearChess(keySide,self.slots)
                if nearCh and nearCh.isSlotActive then
                    self.isCanEditor=true
                    return true
                else
                    self.isCanEditor=false
                    return true
                end
            else
                self.isCanEditor=true
                return true
            end

            self.isCanEditor=false
            return false
        end
    end
    self.isCanEditor=false
    return false

end

function UI_UgcChess:ShowErrorTip()
    self.errorTip:Play()
end

function UI_UgcChess:ShowGreenTip(type)
        self.tipController.selectedIndex=type
end

function UI_UgcChess:ShowRedTip(isShow)
    if isShow then
        self.tipController.selectedIndex=1
    else
        self.tipController.selectedIndex=0
    end
end
function UI_UgcChess:CheckHaveInCfg(name,color,level)
    for i, v in pairs(self.itemCfgs) do
        if v then
            if v.name==name and v.color==color and v.level==level then
                return true
            end
        end
    end
    return false
end