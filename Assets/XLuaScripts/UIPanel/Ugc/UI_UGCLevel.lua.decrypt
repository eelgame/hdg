---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2019/1/7 15:09
---
require("UIPanel.Ugc.UI_UGCLT")
require("UIPanel.Ugc.UI_UGCLevelBuilder")
require("UIPanel.Ugc.UI_UGCLevelWorker")
UI_UGCLevel = {}
UI_UGCLevel.__index = UI_UGCLevel
UI_UGCLevel.panelName = "UI_UGCLevel"
UI_UGCLevel.packageName = "FreeLevel"
UI_UGCLevel.componentName = "UIUGCLevel"
UI_UGCLevel.UIComID =20
UI_UGCLevel.className = 'UI_UGCLevel'
local mri =    require("Common/MemoryReferenceInfo")
function UI_UGCLevel.New(UIShowFunc)
    --这里等把usedata解析出来之后在来判断
    if type(UIShowFunc) == "userdata" then
        UI_UGCLevel.UIShowFunc = UIShowFunc
    end
    print("UI_UGCLevel new")
    CS.UILuaWindowBase.AddFairyGUIPackage("Chessboard");
    CS.UILuaWindowBase.AddFairyGUIPackage("UGC");
    BasePanelObject.New(UI_UGCLevel)

    if UI_UGCLevel.contentPane ~= nil then

        UI_UGCLevel.button_close=UI_UGCLevel.contentPane:GetChild("button_close")
        UI_UGCLevel.button_close.onClick:Set(function ()
            UGCModel.getInstance().model:SetTabState(2)
            UGCModel.getInstance().model:ExitUGC()
            CS.MatchTreeProxy.inst:SetUGCUIOpenState(false)
            CS.UILuaWindowBase.HideWindow("UI_UGCLevel")
            CS.UILuaWindowBase.ShowWindow("UI_MainCity")
        end )
        UI_UGCLevel.ButtonMarkBuilder=UI_UGCLevel.contentPane:GetChild("ButtonMarkBuilder")
        UI_UGCLevel.ButtonMarkBuilder.onClick:Set(function ()
            UI_UGCLevel:SeletcTab(1)
            CS.MatchTreeProxy.inst:SetUGCBuilderOrWorkerState(1)
        end )
        UI_UGCLevel.ButtonMarkWorker=UI_UGCLevel.contentPane:GetChild("ButtonMarkWorker")
        UI_UGCLevel.ButtonMarkWorker.onClick:Set(function ()
            UI_UGCLevel:SeletcTab(2)
            CS.MatchTreeProxy.inst:SetUGCBuilderOrWorkerState(2)
        end )
        UI_UGCLevel.UIBuilderOrWorker=UI_UGCLevel.contentPane:GetController("UIBuilderOrWorker")
        UI_UGCLevel.ComUGCLT = UI_UGCLevel.contentPane:GetChild("UGCLT")
        UI_UGCLevel.UGCLT = UI_UGCLT.new(UI_UGCLevel.ComUGCLT)

        UI_UGCLevel:Inituiinfo()
    end
    UI_UGCLevel:OpenPanel()
end

------初始化UI
function UI_UGCLevel:Inituiinfo()
    CS.MatchTreeProxy.inst:SetUGCUIOpenState(true)
    UGCModel.getInstance().model:GetQueryUploadCostRqst()
    UI_UGCLevel.InitUGCLT()
    --UI_UGCLevel.RefreshUGCLT()
    CS.MatchTreeProxy.inst:SetUGCLevelState(true)
    local curTab= UGCModel.getInstance().model:GetTabState()
    if curTab==1 then

    end
    UI_UGCLevel.workInit=false
    UI_UGCLevel.builderInit=false
    UI_UGCLevel.UGCLevelBuilder=UI_UGCLevelBuilder.new(UI_UGCLevel.contentPane:GetChild("UGCLevelBuilder"),UI_UGCLevel.contentPane:GetChild("Button_NewLevel"))

    UI_UGCLevel.UGCLevelWorker=UI_UGCLevelWorker.new(UI_UGCLevel.contentPane:GetChild("UGCLevelWorker"))
    UI_UGCLevel:SeletcTab( curTab)
    CS.EventCtrl.inst:LuaTriggerEvent("HANDLE_MAINCITYHIDESTATE","bool",{false})
    UI_UGCLevel.UnlockUGCBuilderState()
--    print("打开"..collectgarbage("count"))
    CS.UIWindowViewManager.HideWindow("UICutScene")
    --collectgarbage("collect")
    --UGCModel.instance.model.openTimes=UGCModel.instance.model.openTimes+1
    --mri.m_cConfig.m_bAllMemoryRefFileAddTime = false
    --mri.m_cMethods.DumpMemorySnapshot("./", "1-Before"..UGCModel.instance.model.openTimes, -1)

end

function  UI_UGCLevel:SeletcTab(tabIndex)
    UI_UGCLevel.UIBuilderOrWorker.selectedIndex= tabIndex-1
    if tabIndex==2 then
        if  not UI_UGCLevel.workInit then
            UI_UGCLevel.UGCLevelWorker:Init()
            UI_UGCLevel.UGCLevelWorker:AddListeners()
            UI_UGCLevel.workInit=true
        end
    else
        if  not UI_UGCLevel.builderInit then
            UI_UGCLevel.UGCLevelBuilder:AddListeners()
            UI_UGCLevel.UGCLevelBuilder:Init()
            UI_UGCLevel.builderInit=true
            CS.UIWindowViewManager.HideWindow("UICutScene")
        end
    end
    UGCModel.getInstance().model:SetTabState(tabIndex)
end
--[[
function UI_UGCLevel:UGCLevelWindowClose()
	print("CloseButtonOnClick")
	CS.UILuaWindowBase.HideWindow("UI_UGCLevel")
end]]
function UI_UGCLevel:UnlockUGCBuilderState()
    local CurrMainLevel = CS.MatchTreeProxy.inst:GetMainLevelID();
    --UGCBuilder解锁
    local cfg = CS.SystemEnterconfigManager.Instance():GetConfig(18);
    --UI_UGCLevel.ButtonMarkBuilder
    if cfg.Unlock ==1 then
        if cfg.UnlockPARM<CurrMainLevel then
            UI_UGCLevel.ButtonMarkBuilder.visible = true
        else
            UI_UGCLevel.ButtonMarkBuilder.visible = false
        end
    end
end

function UI_UGCLevel:OpenPanel()
    self:OpenPanelBase()
end

function UI_UGCLevel:ClosePanel()
    self:ClosePanelBase()
end

function UI_UGCLevel:InitUGCLT()
    UI_UGCLevel.UGCLT:InitResInfo()
    UI_UGCLevel.UGCLT:RefreshPowerInfo()
end

function UI_UGCLevel:RefreshUGCLT()
    if UI_UGCLevel then
        UI_UGCLevel.UGCLT:RefreshGoldInfo()
        UI_UGCLevel.UGCLT:RefreshPowerInfo()
        UI_UGCLevel.UGCLT:RefreshEnergyInfo()
        UI_UGCLevel.UGCLT:RefreshTokenCoinInfo()
    end
	--print("update UI")
end

function UI_UGCLevel:GetActionPointInfoRspd(...)
    local actionPointInfo = MsgType.CGActionPointInfoRqst:New(...)
    if UI_UGCLevel then
        UI_UGCLevel.UGCLT:RefreshPowerInfo()
    end
end

function UI_UGCLevel.PlayUGCLTAnim(isShow)
    UI_UGCLevel.UGCLT:ShowAndHide(isShow)
end

function UI_UGCLevel.AddListeners()
    -- CS.EventCtrl.inst:LuaAddEventListener("EVENT_REFRESH_REDHINT",nil ,UI_MainCity.RefreshRedHint);
	CS.EventCtrl.inst:LuaAddEventListener("EVENT_UGCRES_UPDATE",nil,UI_UGCLevel.RefreshUGCLT)
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_UGCLT_SHOWORHIDE","bool",UI_UGCLevel.PlayUGCLTAnim)
    Event.AddListener(tostring(MsgTypeCmd.GC_ActionPointInfoRspd),UI_UGCLevel.GetActionPointInfoRspd)
   -- Event.AddListener(tostring(MsgTypeCmd.GCObjEventChangeRspd) , UI_UGCLevel.RefreshUGCLT())

end

function UI_UGCLevel.RemoveListeners()
    --  CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_REFRESH_REDHINT",nil , UI_MainCity.RefreshRedHint);

    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_UGCLT_SHOWORHIDE","bool",UI_UGCLevel.PlayUGCLTAnim)
    if   UI_UGCLevel.builderInit then
        UI_UGCLevel.UGCLevelBuilder:RemoveListeners()
    end
    if  UI_UGCLevel.workInit then
        UI_UGCLevel.UGCLevelWorker:RemoveListeners()
    end
    --Event.RemoveListener(tostring(MsgTypeCmd.GCObjEventChangeRspd) , UI_UGCLevel.RefreshUGCLT())
end

function UI_UGCLevel.OnShown()

end

function UI_UGCLevel.Dispose()
    UI_UGCLevel.UIBuilderOrWorker=nil
    UI_UGCLevel.contentPane=nil
    UI_UGCLevel.ButtonMarkBuilder=nil
    UI_UGCLevel.button_close=nil
    UI_UGCLevel.UGCLT:Dispose()
    UI_UGCLevel.UGCLT=nil
    UI_UGCLevel.ComUGCLT=nil
    if  UI_UGCLevel.UGCLevelWorker then
        UI_UGCLevel.UGCLevelWorker:Dispose()
        UI_UGCLevel.UGCLevelWorker=nil
    end
    if  UI_UGCLevel.UGCLevelBuilder then
        UI_UGCLevel.UGCLevelBuilder:Dispose()
        UI_UGCLevel.UGCLevelBuilder=nil
    end
end


function UI_UGCLevel.OnHide()

    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_UGCRES_UPDATE",nil,UI_UGCLevel.RefreshUGCLT)
    CS.EventCtrl.inst:LuaTriggerEvent("HANDLE_MAINCITYHIDESTATE","bool",{true})

    Event.RemoveListener(tostring(MsgTypeCmd.GC_ActionPointInfoRspd),UI_UGCLevel.GetActionPointInfoRspd)
    UI_UGCLevel.Dispose()
    collectgarbage("collect")
    --UGCModel.instance.model.openTimes=UGCModel.instance.model.openTimes+1
    --mri.m_cMethods.DumpMemorySnapshot("./", "1-Before"..UGCModel.instance.model.openTimes, -1)
    --if  UGCModel.instance.model.openTimes>1 then
    --    local before=  UGCModel.instance.model.openTimes-1
    --    mri.m_cMethods.DumpMemorySnapshotComparedFile("./", "Compared", -1, "./LuaMemRefInfo-All-[1-Before"..UGCModel.instance.model.openTimes.."].txt", "./LuaMemRefInfo-All-[1-Before"..before.."].txt")
    --end
    --print("关闭"..collectgarbage("count"))
end

