---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2019/1/7 17:25
---
require("UIPanel.Ugc.UI_UgcComWorkerLevel")
UI_UGCLevelWorker=classUtlis()
function UI_UGCLevelWorker:ctor(panel)

    self.ListWorkerLevel=panel:GetChild("ListWorkerLevel")
    --self.ListWorkerLevel.onClickItem:Add(function (context)
    --
    --       local index=self.ListWorkerLevel:GetChildIndex(context.data)
    --       local index2=self.ListWorkerLevel:ChildIndexToItemIndex(index)
    --    print( "dsadasdasda===="..index)
    --    print( "index2===="..index2)
    --    --   self.ComWorkerLevels[context.data]:FlushInfo(UGCModel.getInstance().model:GetGivCard(index2+1))
    --end)
    self.firstInit=true
    self.isCanScroll=true
    self.ListWorkerLevel:SetVirtualAndLoop()
    self.ListWorkerLevel.scrollPane.scrollStep=500
    self.ListWorkerLevel.scrollPane.onScrollEnd:Set(function()
        local obj=    self.ListWorkerLevel:GetChildAt(1)
        for i, v in pairs( self.ComWorkerLevels) do
            v:SetBoardVisible(obj==i)
        end
        if self.ComWorkerLevelDatas[obj] then
            UGCModel.getInstance().model:SetGiveCurIndex(self.ComWorkerLevelDatas[obj]-1)
            UGCModel.getInstance().model:ClearGiveLevel(self.ComWorkerLevelDatas[obj])
        end
        self.isCanScroll=true
    end)
    self.begainTime=0
    self.begainX=0
    self.moveGesture=FairyGUI.SwipeGesture(self.ListWorkerLevel)
    self.moveGesture.onBegin:Set(function (context)
        self.begainTime=CS.UnityEngine.Time.unscaledTime
        self.begainX=context.inputEvent.x
    end)
    self.moveGesture.onEnd:Set(function (context)
        if CS.UnityEngine.Time.unscaledTime-self.begainTime<1 then
            local distance= math.abs(self.begainX-context.inputEvent.x)
            if distance>30 and distance<500 then
                if(self.begainX>context.inputEvent.x) then
                    if self.isCanScroll then
                        self.ListWorkerLevel.scrollPane:ScrollRight(2,true)
                        self.isCanScroll=false
                    end
                else
                    if self.isCanScroll then
                        self.ListWorkerLevel.scrollPane:ScrollLeft(2,true)
                        self.isCanScroll=false
                    end
                end
            end
        end
    end)
    --self.ListWorkerLevel.scrollPane.maxVelocity=2000
   --  self.ListWorkerLevel.scrollPane.decelerationRate=0.99
    --self.ListWorkerLevel.scrollPane.onScroll:Add(function()
    --    print("scroll")
    --end)

    self.ComWorkerLevels={}
    self.ComWorkerLevelDatas={}
    self.CurComWorkerLevel=nil
    self.itemIndex=0
    self.ListWorkerLevel.itemRenderer= function (index,obj)
        self.itemIndex=  self.ListWorkerLevel:GetChildIndex(obj)
        if  self.ComWorkerLevels[ obj]==nil then
            self.ComWorkerLevels[ obj]= UI_UgcComWorkerLevel.new(obj)
        end
        if   self.ComWorkerLevelDatas[obj]~= index+1 then
            self.ComWorkerLevels[obj]:FlushInfo(UGCModel.getInstance().model:GetGivCard(index+1),index+1,true,function ()
                if self and  self.FlushBoardInfoCallback then
                    self:FlushBoardInfoCallback()
                end

            end)
        end
        --if index==self.ListWorkerLevel.numItems-2 then
        --   self.ListWorkerLevel.numItems = self.ListWorkerLevel.numItems+200
        --  --  self.ListWorkerLevel:RefreshVirtualList()
        --end
        self.ComWorkerLevelDatas[obj]=index+1
        -- self:WorkLevelItemRenderer(index,obj)
    end
    self.ListWorkerLevel.numItems=9
    UGCModel.getInstance().model:SetGiveCurIndex(1)
  --  self.ListWorkerLevel.scrollPane:ScrollRight(2,true)
  --  self.ListWorkerLevel.scrollPane:ScrollLeft(2,true)


    --for i = 1, 3 do
    --
    --end

    self.ButtonLPage=panel:GetChild("ButtonLPage")
    self.ButtonLPage.onClick:Set(function ()
        if self.isCanScroll then
            self.ListWorkerLevel.scrollPane:ScrollLeft(2,true)
            self.isCanScroll=false
        end

        --  UGCModel.getInstance().model:AddGiveCurIndex()
        --   self:FlushUI()
    end)
    self.ButtonRPage=panel:GetChild("ButtonRPage")
    self.ButtonRPage.onClick:Set(function ()
        if self.isCanScroll then
            self.ListWorkerLevel.scrollPane:ScrollRight(2,true)
            self.isCanScroll=false
        end
        -- UGCModel.getInstance().model:SubGiveCurIndex()
        --  self:FlushUI()
    end)
    end

function UI_UGCLevelWorker:FlushBoardInfoCallback()
    if self.ListWorkerLevel then
        local obj=    self.ListWorkerLevel:GetChildAt(1)
        if self.ComWorkerLevels[obj] then
            self.ComWorkerLevels[obj]:SetBoardVisible(true)
        end
    end
end

function UI_UGCLevelWorker:GetCurLevelInfo()
    local obj=    self.ListWorkerLevel:GetChildAt(1)
    if self.ComWorkerLevelDatas[obj] then
        return    UGCModel.getInstance().model:GetGivCard( self.ComWorkerLevelDatas[obj])
    end
 return nil
end

function UI_UGCLevelWorker:SetSearchLevelInfo(index)
    if self.ListWorkerLevel then
        local obj=    self.ListWorkerLevel:GetChildAt(1)
        if self.ComWorkerLevelDatas[obj] then
            self.ComWorkerLevelDatas[obj]=index
        end
    end
end

function UI_UGCLevelWorker:FlushInfo(levelInfo)
    if levelInfo then
        self.curLevelInfo=levelInfo
        self.board:FlushInfo(levelInfo)
    end

end

function UI_UGCLevelWorker:FlushUI(index)
    for i, v in pairs( self.ComWorkerLevelDatas) do
        if v==index  then
            if self.firstInit then
                self.ComWorkerLevels[i]:FlushInfo(UGCModel.getInstance().model:GetGivCard( index),index,true,function ()
                    if self then
                        self.finishCount= self.finishCount+1
                        if  self.finishCount==2 then
                            self.firstInit=false
                            CS.UIWindowViewManager.HideWindow("UICutScene")
                        end
                        self:FlushBoardInfoCallback()
                    end
                end,true)
            else
                self.ComWorkerLevels[i]:FlushInfo(UGCModel.getInstance().model:GetGivCard( index),index,true,function ()
                    if self then
                        self:FlushBoardInfoCallback()
                    end
                end)
            end
        end
    end
end

function UI_UGCLevelWorker:Init()
    self.curIndex=1
    self.finishCount=0
    self.firstInit=true
    self:InitHandler()

    --self:FlushUI()
end

function UI_UGCLevelWorker:AddListeners()
    Event.AddListener(LuaGameEventType.HANDLER_FLUSH_WORKERUI, self.flushUIHandler )
    Event.AddListener(LuaGameEventType.HANDLER_FLUSH_WORKER_SEARCHUI, self.flushSearchUIHandler )
    Event.AddListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , self.OnGCUgcLevelOptRspdRspdHandler)
end

function UI_UGCLevelWorker:RemoveListeners()
    Event.RemoveListener(LuaGameEventType.HANDLER_FLUSH_WORKERUI,  self.flushUIHandler)
    Event.RemoveListener(LuaGameEventType.HANDLER_FLUSH_WORKER_SEARCHUI, self.flushSearchUIHandler )
    Event.RemoveListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , self.OnGCUgcLevelOptRspdRspdHandler)
end

function UI_UGCLevelWorker:FlushFollowState()
    for i, v in pairs( self.ComWorkerLevels) do
        v:FlushFollowState()
    end
end

function UI_UGCLevelWorker:Dispose()
    for i, v in pairs( self.ComWorkerLevels) do
        v:Dispose()
        self.ComWorkerLevels[i]=nil
    end
    self.ComWorkerLevels=nil
    self.moveGesture:Dispose()
    self.moveGesture=nil
    for i, v in pairs( self.ComWorkerLevelDatas) do
        self.ComWorkerLevelDatas[i]=nil
    end
    self.ComWorkerLevelDatas=nil
    self.ListWorkerLevel=nil
    self.flushUIHandler=nil
    self.flushSearchUIHandler=nil
    self.OnGCUgcLevelOptRspdRspdHandler=nil
    self.ButtonLPage=nil
    self.ButtonRPage=nil
end

function UI_UGCLevelWorker:InitHandler()
    self.flushUIHandler=function(...)
       local temp = { ... }
        self:FlushUI(temp[1][1])
    end
    self.flushSearchUIHandler=function(...)
        local temp = { ... }
        local index=temp[1][1]
        self:SetSearchLevelInfo(index)
        self:FlushUI(index)
    end
    self.OnGCUgcLevelOptRspdRspdHandler=function(...)
        local rspd = MsgType.GCUgcLevelOptRspd:New(...)
        if rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Follow or rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_CancelFollow then
            if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                self:FlushFollowState()
            end
        end

    end
end
