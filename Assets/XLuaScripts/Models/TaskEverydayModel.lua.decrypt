---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yzc.
--- DateTime: 2018/9/8 15:06
---

--每个模块（代理）对应的单个元素信息

SingleTaskInfo = {}
SingleTaskInfo.__index = SingleTaskInfo
SingleTaskInfo.MyClassType = "SingleTaskInfo"
function SingleTaskInfo.New(info)
    tb = {}
    setmetatable(tb, SingleTaskInfo)
    tb:Init(info)
    return tb
end
function SingleTaskInfo:Init(tb)
    self.taskID = tb.taskID --任务ID
    self.target = tb.target --任务目标上限
    self.progress = tb.progress --已完成目标数
    self.mark = tb.mark --目标奖励
end
--[[
function SingleTaskInfo:Init(tb)
    self.taskID = tb.taskID
    self.taskType = tb.taskType
    self.taskTarget = tb.taskTarget
    self.taskPriority = tb.taskPriority --显示顺序优先级
    self.taskLanguage = tb.taskLanguage
    self.taskStep = tb.taskStep
end]]
SingleTaskPrizeBoxInfo = {}
SingleTaskPrizeBoxInfo.__index = SingleTaskPrizeBoxInfo
SingleTaskPrizeBoxInfo.MyClassType = "SingleTaskPrizeBoxInfo"
function SingleTaskPrizeBoxInfo.New(info)
    tb = {}
    setmetatable(tb, SingleTaskPrizeBoxInfo)
    tb:Init(info)
    return tb
end

function SingleTaskPrizeBoxInfo:Init(tb)
    self.rewardID = tb.rewardID
    self.mark = tb.mark
    self.isRewarded = tb.isRewarded
end

TaskEverydayModel = {}
TaskEverydayModel.instance = nil
TaskEverydayModel.__index = TaskEverydayModel;

TaskEverydayModel.Class = TaskEverydayModel
TaskEverydayModel.Name = 'TaskEverydayModel'

function TaskEverydayModel:getInstance()
    if not TaskEverydayModel.instance then
        TaskEverydayModel.instance = TaskEverydayModel.New()
    end
    return TaskEverydayModel.instance
end

function TaskEverydayModel.New()
    tb = {}
    BaseModelObject.New(TaskEverydayModel)
    setmetatable(tb, TaskEverydayModel)
    return tb;
end
--[[
TaskEverydayModel.isSuccess = nil;
TaskEverydayModel.isOpen = nil;
TaskEverydayModel.keyCount = 0]]
--TaskEverydayModel.Finishedtask =0;--当日已完成的任务数量
--创建SingleTaskInfo类型的列表
TaskEverydayModel.tasklist = List:New(SingleTaskInfo)
TaskEverydayModel.taskPrizeList = List:New(SingleTaskPrizeBoxInfo)

function TaskEverydayModel.AddListeners()
    --Event.AddListener(tostring(MsgTypeCmd.GC_CoinActivityInfoRspd), TaskEverydayModel.GCCoinActivityInfo)
    --Event.AddListener(tostring(MsgTypeCmd.GC_CoinOpenBoxRspd), TaskEverydayModel.GCCoinOpenBoxRspd)
    CS.EventCtrl.inst:LuaAddEventListener("InviteFriend","string" ,TaskEverydayModel.InviteFriend);
    CS.EventCtrl.inst:LuaAddEventListener("ShareSucceed",nil ,TaskEverydayModel.ShareSucceed);
    CS.EventCtrl.inst:LuaAddEventListener("OnTaskEveryDayCompleted","int" ,TaskEverydayModel.OnCompleteEverydayTaskRqst);
    CS.EventCtrl.inst:LuaAddEventListener("OnRqstTaskInfoToRefresh",nil,TaskEverydayModel.GetTaskListInfoRqst)
    Event.AddListener(tostring(MsgTypeCmd.GC_EveryDayTaskInfoRspd),TaskEverydayModel.GetTaskListInfoRspd)
    Event.AddListener(tostring(MsgTypeCmd.GC_EveryDayTaskRewardRspd),TaskEverydayModel.GetTaskRewardRspd)
    Event.AddListener(tostring(MsgTypeCmd.GC_EveryDayTaskEventRspd),TaskEverydayModel.OnCompleteEverydayTaskRspd)
end

function TaskEverydayModel.RemoveListeners()
    --Event.RemoveListener(tostring(MsgTypeCmd.GC_CoinActivityInfoRspd), TaskEverydayModel.GCCoinActivityInfo)
    --Event.RemoveListener(tostring(MsgTypeCmd.GC_CoinOpenBoxRspd), TaskEverydayModel.GCCoinOpenBoxRspd)
    CS.EventCtrl.inst:LuaRemoveEventListener("InviteFriend","string" ,TaskEverydayModel.InviteFriend);
    CS.EventCtrl.inst:LuaRemoveEventListener("ShareSucceed",nil ,TaskEverydayModel.ShareSucceed);
    CS.EventCtrl.inst:LuaRemoveEventListener("OnTaskEveryDayCompleted","int" ,TaskEverydayModel.OnCompleteEverydayTaskRqst);
    CS.EventCtrl.inst:LuaRemoveEventListener("OnRqstTaskInfoToRefresh",nil,TaskEverydayModel.GetTaskListInfoRqst)
    Event.RemoveListener(tostring(MsgTypeCmd.GC_EveryDayTaskInfoRspd),TaskEverydayModel.GetTaskListInfoRspd)
    Event.RemoveListener(tostring(MsgTypeCmd.GC_EveryDayTaskRewardRspd),TaskEverydayModel.GetTaskRewardRspd)
    Event.RemoveListener(tostring(MsgTypeCmd.GC_EveryDayTaskEventRspd),TaskEverydayModel.OnCompleteEverydayTaskRspd)
end

function TaskEverydayModel:RefreshRedHint()
        local prizeBoxList = TaskEverydayModel.taskPrizeList
       -- print(#prizeBoxList)
        --print(prizeBoxList)
        if #prizeBoxList ~= 0 then
            if prizeBoxList[1].isRewarded == 0 and prizeBoxList[1].mark<=TaskEverydayModel.totalMark  then
                return true
            end
            if prizeBoxList[2].isRewarded == 0 and prizeBoxList[2].mark<=TaskEverydayModel.totalMark then
                return true
            end
            if prizeBoxList[3].isRewarded == 0 and prizeBoxList[3].mark<=TaskEverydayModel.totalMark then
                return true
            end
        end
        return false
end
--[[
function TaskEverydayModel.GCCoinActivityInfo(...)
    local rspd = MsgType.GCCoinActivityInfoRspd:New(...)
    TaskEverydayModel.isSuccess = rspd.isSuccess
    TaskEverydayModel.isOpen = rspd.isOpen
    TaskEverydayModel.keyCount = rspd.keyCount
    TaskEverydayModel.tasklist:Clear()
    for i = 1, #rspd.taskList do
        local info = SingleTaskInfo.New(rspd.taskList[i])
        TaskEverydayModel.tasklist:Add(info)
    end
    UI_TaskEveryday.RefreshTaskList()
end]]
--领取礼物盒奖励请求
function TaskEverydayModel.GetPrizeBoxRqst(prizeIndex)
    local taskReward = MsgType.CGEveryDayTaskRewardRqst:New()
    taskReward.rewardID = prizeIndex
    taskReward:Send()
end
--获取任务列表信息请求
function TaskEverydayModel.GetTaskListInfoRqst()
    local taskRqst = MsgType.CGEveryDayTaskInfoRqst:New()
    taskRqst:Send()
    --print("TaskList Infomation Requst!")
    --print("TaskEverydayModel.maxMark")
    --print(TaskEverydayModel.maxMark)
end

TaskEverydayModel.totalMark = 0
TaskEverydayModel.maxMark = 0
TaskEverydayModel.isTaskOPen = false
function TaskEverydayModel.GetTaskListInfoRspd(...)
    local taskRspd = MsgType.GCEveryDayTaskInfoRspd:New(...)
    TaskEverydayModel.totalMark = taskRspd.totalMark>taskRspd.maxMark and taskRspd.maxMark or taskRspd.totalMark
    TaskEverydayModel.maxMark = taskRspd.maxMark
    TaskEverydayModel.tasklist:Clear()
    TaskEverydayModel.taskPrizeList:Clear()
    for i = 1,#taskRspd.taskList do
        local singleTaskInfo = SingleTaskInfo.New(taskRspd.taskList[i])
        TaskEverydayModel.tasklist:Add(singleTaskInfo)
        --[[
        print("ID--"..singleTaskInfo.taskID)
        print("target"..singleTaskInfo.target)
        print("progress"..singleTaskInfo.progress)
        print("mark"..singleTaskInfo.mark)]]
    end
    for i = 1,#taskRspd.boxList do
        local singlePrizeBoxInfo = SingleTaskPrizeBoxInfo.New(taskRspd.boxList[i])
        TaskEverydayModel.taskPrizeList:Add(singlePrizeBoxInfo)
    end
    --print("------UI_TaskEveryday.isOPen---")
    --print("taskList.Length---"..#taskRspd.taskList)
    if  TaskEverydayModel.isTaskOPen == true then
        UI_TaskEveryday.RefreshTaskInfo()
    end
    --print("taskList.Length---"..#taskRspd.taskList)
    --print("taskPrizeListLength---"..#TaskEverydayModel.taskPrizeList)
    --print('progress------'..TaskEverydayModel.tasklist[1].progress)
    --UI_TaskEveryday.InitUIInfo()
    --[[print("Length---"..taskRspd.taskList.Length)
    print("TaskEverydayModel.maxMark")
    print("maxMark-----"..taskRspd.maxMark)]]
    --UI_TaskEveryday.InitUIInfo()
end

function TaskEverydayModel.GetTaskRewardRspd(...)
    local taskReward = MsgType.GCEveryDayTaskRewardRspd:New(...)
    UI_TaskEveryday.RefreshTaskInfo()
    --taskReward.itemList
   -- CS.BagManager.inst:ShowGetItemView(taskReward.itemList)
end
--[[
function TaskEverydayModel.GCCoinOpenBoxRspd(...)
    local rspd = MsgType.GCCoinOpenBoxRspd:New(...)
    print("转账数量".. rspd.coinNum)
    CS.EventCtrl.inst:LuaTriggerEvent("EVENT_OPEN_TTANSITION","int" ,{rspd.coinNum})
    --刷新区块链代币
    local ret =  CellLinkSystem.CallContractFunction(false,CellLinkSystem.TokenContractAddress,CellLinkSystem.masterKeyName,CellLinkSystem.pathKey,1,CellLinkSystem.masterKeyName,CellLinkSystem.pathKey,"getBalanceOf",{CellLinkSystem.rawAddress},CellLinkSystem.rawAddress)
    if ret ~= false then
        local str =  string.sub(ret,string.find(ret,',')+1,string.find(ret,']')-1)
        if CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.Android or CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer then
            str = string.sub(str,string.find(str,"\n")+1)--加2的原因是\r\n属于两个字符，
        else
            str = string.sub(str,string.find(str,"\r\n")+2)--加2的原因是\r\n属于两个字符，
        end
        str = string.gsub(str,"^%s*(.-)%s*$","%1")--去空格
        UI_MainCity.m_LT.m_TokenButton.title = str
        CellLinkSystem.Coin = str;
    else
        UI_MainCity.m_LT.m_TokenButton.title = 0
    end
end]]

--FB返回邀请的facebook好友ID
function TaskEverydayModel.InviteFriend(parastr)
    TaskEverydayModel.OnCompleteEverydayTaskRqst(5)
    local para =  string.sub(parastr,2,string.len(parastr)-1)
    CS.SDKManager.inst:SDKLog("TaskEverydayModel.InviteFriend:"..para)
    if "" ==  para  then return end

    local paraList = Split(para,",")
    local tb = {}
    for  k,v in pairs(paraList)  do
        local temp = MsgType.BeInviterData:New()
        temp.beInviterUUID = v
        table.insert(tb,temp)
    end
    local msg =  MsgType.CGInviteFriendRqst:New()
    msg.beInviterList =  tb
    msg:Send()
end

--完成分享每日任务
function TaskEverydayModel.ShareSucceed()
    --[[
    local msg = MsgType.CGCoinTaskEventRqst:New()
    msg.taskType = 3
    msg:Send()]]
    CS.SDKManager.inst:SDKLog("ShareSucceed Call Back Task Succeed!!!")

    TaskEverydayModel.OnCompleteEverydayTaskRqst(4)
end
--taskType 仅限(4-分享,5-邀请fb好友,10-看广告)
function TaskEverydayModel.OnCompleteEverydayTaskRqst(taskType)
    CS.SDKManager.inst:SDKLog("TaskEverydayModel.ShareSucceed!!!!")
    if CS.UnityEngine.Application.platform ~= CS.UnityEngine.RuntimePlatform.WindowsEditor then
        CS.SDKManager.inst:SDKLog("OnCompleteEverydayTaskRqst--taskType:"..tostring(taskType))
        local msg = MsgType.CGEveryDayTaskEventRqst:New()
        msg.eventType = taskType
        msg:Send()
    end
end

function TaskEverydayModel.OnCompleteEverydayTaskRspd(...)
    local msgRspd = MsgType.GCEveryDayTaskEventRspd:New(...)
    CS.SDKManager.inst:SDKLog("OnCompleteEverydayTaskRspd:errorCode"..tostring(msgRspd.errorCode).."msgSeq:"..tostring(msgRspd.msgSeq))
    if TaskEverydayModel.isTaskOPen == true then
        TaskEverydayModel.GetTaskListInfoRqst()
    end
end