---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2018/11/9 19:23
---
---
require("UIPanel.Ugc.UGCCommand")
local JSON = require("Libs.json.json4lua")
UGCModel = {}
UGCModel.instance = nil
UGCModel.__index = UGCModel

UGCModel.Class = UGCModel
UGCModel.Name = 'UGCModel'

function UGCModel:getInstance()
    if not UGCModel.instance then
        UGCModel.instance = UGCModel.New()
    end
    return UGCModel.instance
end

function UGCModel.New()
   local tb = {}
   -- print("UGCModel new")
    BaseModelObject.New(UGCModel)
    tb.model=UGCModelClass.new()
    tb.model:SetTarget(1,"None",0)
    tb.model:SetTarget(2,"None",0)
    tb.model:SetTargetCount(1,10)
    tb.model:SetTargetCount(2,0)
    tb.model:SetTabState(2)
    setmetatable(tb, UGCModel)
    return tb
end


function UGCModel.AddListeners()
    Event.AddListener(tostring(MsgType.GCUgcLevelMatchRspd.GetCmd()) , UGCModel.OnGCUgcLevelMatchRspd)
    Event.AddListener(tostring(MsgType.GCUgcGetOwnerLevelRspd.GetCmd()) , UGCModel.OnGCUgcGetOwnerLevelRspd)
    Event.AddListener(tostring(MsgType.GCUgcLevelGetListRspd.GetCmd()) , UGCModel.OnGCUgcLevelGetListRspd)
    Event.AddListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , UGCModel.OnGCUgcLevelOptRspdRspd)
    Event.AddListener(tostring(MsgType.GCUgcLevelPlayStartRspd.GetCmd()) , UGCModel.OnGCUgcLevelPlayStartRspd)
    Event.AddListener(tostring(MsgType.GCUgcLevelPlayEndRspd.GetCmd()) , UGCModel.OnGCUgcLevelPlayEndRspd)
    Event.AddListener(tostring(MsgType.GCUgcLevelSearchRspd.GetCmd()) , UGCModel.OnGCUgcLevelSearchRspd)
    Event.AddListener(tostring(MsgType.GCUgcComLevelListRspd.GetCmd()),UGCModel.OnGCUgcComLevelListRspd)
    Event.AddListener(tostring(MsgType.GCUgcGetCreatorInfoRspd.GetCmd()),UGCModel.OnGCUgcGetCreatorInfoRspd)
    Event.AddListener(LuaGameEventType.EVENT_SEND_GAME_RESOULT , UGCModel.OnSendGameResoult)
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_MATCHTREE_STARTGAME",nil,UGCModel.OnSendStartGame)
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_MATCHTREE_SENDCHECKDATA","string" ,UGCModel.OnSendCheckData)
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_UGC_SHOWRECOMMONDLEVEL",nil,UGCModel.OnShowRecommondLevel)
    CS.EventCtrl.inst:LuaAddEventListener("EVENT_UGC_RQSTPLAYERHOME","int",UGCModel.OnRqstPlayerHomeShow)
end

function UGCModel.RemoveListeners()
    Event.RemoveListener(tostring(MsgType.GCUgcLevelMatchRspd.GetCmd()) , UGCModel.OnGCUgcLevelMatchRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcGetOwnerLevelRspd.GetCmd()) , UGCModel.OnGCUgcGetOwnerLevelRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcLevelGetListRspd.GetCmd()) , UGCModel.OnGCUgcLevelGetListRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcLevelOptRspd.GetCmd()) , UGCModel.OnGCUgcLevelOptRspdRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcLevelPlayStartRspd.GetCmd()) , UGCModel.OnGCUgcLevelPlayStartRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcLevelPlayEndRspd.GetCmd()) , UGCModel.OnGCUgcLevelPlayEndRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcLevelSearchRspd.GetCmd()) , UGCModel.OnGCUgcLevelSearchRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcComLevelListRspd.GetCmd()),UGCModel.OnGCUgcComLevelListRspd)
    Event.RemoveListener(tostring(MsgType.GCUgcGetCreatorInfoRspd.GetCmd()),UGCModel.OnGCUgcGetCreatorInfoRspd)
    Event.RemoveListener(LuaGameEventType.EVENT_SEND_GAME_RESOULT , UGCModel.OnSendGameResoult)
    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_MATCHTREE_STARTGAME",nil,UGCModel.OnSendStartGame)
    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_MATCHTREE_SENDCHECKDATA","string" ,UGCModel.OnSendCheckData)
    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_UGC_SHOWRECOMMONDLEVEL",nil,UGCModel.OnShowRecommondLevel)
    CS.EventCtrl.inst:LuaRemoveEventListener("EVENT_UGC_RQSTPLAYERHOME","int",UGCModel.OnRqstPlayerHomeShow)
end

function UGCModel.OnSendCheckData()
    if UGCModel.getInstance().model:GetGameResult() then
        UGCModel.getInstance().model:UGCLevelPlayEndFinishRqst()
    else
        UGCModel.getInstance().model:UGCLevelPlayEndFailRqst()
    end
end
function UGCModel.OnSendStartGame()
    UGCModel:getInstance().model:UGCLevelPlayStartRqst()
end
function UGCModel.OnSendGameResoult(resoult)
    UGCModel:getInstance().model:UGCLevelPlayEndExitRqst()
end
--是否显示推荐关卡界面
function UGCModel.OnShowRecommondLevel()
    local recommondInfoList = UGCModel.getInstance().model:GetRecommondLevelInfoList()
    if #recommondInfoList>0 then
        CS.UILuaWindowBase.ShowWindow("UI_UGCRecommendation")
    end
end

function UGCModel.OnRqstPlayerHomeShow(playerID)
    UGCModel:getInstance().model:ShowMyHome(playerID)
end

function UGCModel.OnGCUgcGetCreatorInfoRspd(...)
    local rspd = MsgType.GCUgcGetCreatorInfoRspd:New(...)
    local model=UGCModel.getInstance().model
    model.myHomePlayerInfo.ownerRoleUID = rspd.ownerRoleUID
    model.myHomePlayerInfo.ownerRoleName =  rspd.ownerRoleName
    model.myHomePlayerInfo.ownerPortraitID =  rspd.ownerPortraitID
    model.myHomePlayerInfo.followCount =  rspd.followCount
    model.myHomePlayerInfo.fansCount = rspd.fansCount
    model.myHomePlayerInfo.wPoint = rspd.wPoint
    model.myHomePlayerInfo.bPoint = rspd.bPoint
    model.myHomePlayerInfo.introduction =  rspd.introduction
    model.myHomePlayerInfo.total =  rspd.total
    model.myHomePlayerInfo.isFollowed =  rspd.isFollowed ---已经关注-1，0自己，1没有关注过
    CS.UILuaWindowBase.ShowWindow("UI_UgcMyHome")
end

---UGC关卡搜索返回
function UGCModel.OnGCUgcLevelSearchRspd(...)
    local rspd = MsgType.GCUgcLevelSearchRspd:New(...)
    if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
        local model=UGCModel.getInstance().model
        local levels=UGCModel.PraseLevelDetail({rspd.ugcLevelData})
        print(#levels)
        for i, v in pairs(levels) do
            model.giveLevels[model.curMatchIndex+1]=v
            --[[
            print("v .ugcLevelID:"..tostring(v .levelID))
            print("v .ownerRoleUID:"..tostring(v.ownerRoleUID))
            print("v .ownerRoleName:"..tostring(v.ownerRoleName))
            print("v .ownerPortraitID:"..tostring(v.ownerPortraitID))
            print("v .playCount:"..tostring(v.playCount))
            print("v .Count:"..tostring(v.levelProfile.limit))]]
        end
        UGCModel.getInstance().model:SetFullRecommondLevelInfo(levels)
            if CS.UILuaWindowBase.GetWindow("UI_UGCLevel") then
                Event.Brocast(LuaGameEventType.HANDLER_FLUSH_WORKER_SEARCHUI,model.curMatchIndex+1)
                CS.UILuaWindowBase.HideWindow("UI_Search")
                CS.GameMsgHint.inst:ShowSmallTips(CS.GUIHelper.ParseStringTable(3221))
            end
            if CS.UILuaWindowBase.GetWindow("UI_UGCRecommendation") then
               -- print("UI_UGCRecommendation")
                CS.EventCtrl.inst:LuaTriggerEvent("EVENT_UGC_REFRESHRECOMMONDUI","int",{UI_UGCRecommendation.curDataIndex})
            end
    else
        CS.GameMsgHint.inst:ShowSmallTips(CS.GUIHelper.ParseStringTable(3222))
    end
end

---UGC关卡开始返回
function UGCModel.OnGCUgcLevelPlayStartRspd(...)
    local rspd = MsgType.GCUgcLevelPlayStartRspd:New(...)
    if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
        UGCModel:getInstance().model:InitUGCProfileAndEnter(UGCModel:getInstance().model.curEditorlevel,false,false,false)
    else
       CS.GameMsgHint.inst:ShowServerErrorCode(rspd.errorCode)
    end
end

---UGC关卡结束返回
function UGCModel.OnGCUgcLevelPlayEndRspd(...)
    local rspd = MsgType.GCUgcLevelPlayEndRspd:New(...)
    if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
        --if UGCModel.getInstance().model:GetGameResult() then
        --    UGCModel.getInstance().model.curEditorlevel.isPlayed=1
        --end
    end
end

---UGC关卡各种操作返回
function UGCModel.OnGCUgcLevelOptRspdRspd(...)
        UGCModel:getInstance().model.rqstSending=false
        local rspd = MsgType.GCUgcLevelOptRspd:New(...)
        if rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Create then
            if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                UGCModel:getInstance().model.curEditorlevel.levelID=rspd.ugcLevelID
                UGCModel:getInstance().model:NewSaveLevel()
                UGCModel:getInstance().model.isHaveSaveEditorLevel=true
                UGCModel:getInstance().model.isSaved=true
                CS.MatchTreeProxy.inst:SetUGCEditorState(true)
                CS.MatchTreeProxy.inst:EnterUGC(rspd.ugcLevelID)
            end
        elseif rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Edit then
            if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                UGCModel:getInstance().model.isHaveSaveEditorLevel=true
                UGCModel:getInstance().model.isSaved=true
                UGCModel.StartGameWithCurLevelProfile()
            end
        elseif rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Upload then
            if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                UGCModel:getInstance().model:UploadSaveLevel(rspd.ugcLevelID)
            end
        elseif rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_QueryUploadCost then
            if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                UGCModel:getInstance().model.curEnergyCost=rspd.uploadCost or 0
            end
         elseif rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_Follow  or rspd.optType==MsgType.EUgcLevelOptType.EUgcLevelOptType_CancelFollow then
                if rspd.errorCode==MsgType.EUgcLevelErrorCode.EUgcLevelErrorCode_Success then
                    local model=UGCModel.getInstance().model
                    for i, v in pairs(model.giveLevels) do
                        if v.ownerRoleUID==model.myHomePlayerInfo.ownerRoleUID then
                            v.isFollowed=model.myHomePlayerInfo.isFollowed
                        end
                    end
                end
        end
end

function UGCModel.StartGameWithCurLevelProfile()
    if  UGCModel:getInstance().model.isTestStart then
        local curLevelInfo=UGCModel:getInstance().model.curEditorlevel
        UGCModel:getInstance().model:SetCurLevelProfile( curLevelInfo.jsonLevelProfile, curLevelInfo.templateName,curLevelInfo.ownerRoleName,curLevelInfo.ownerPortraitID)
       -- CS.WwiseManager.PlayWwise("game_song")
        CS.MatchTreeProxy.inst:StartGame()
        CS.UILuaWindowBase.HideWindow("UI_Ugc")
    end
end

function UGCModel.OnGCUgcLevelMatchRspd(...)
    local rspd = MsgType.GCUgcLevelMatchRspd:New(...)
    local model=UGCModel.getInstance().model
    local levels=UGCModel.PraseLevelDetail(rspd.ugcLevelDataList)
    local index=rspd.clientIndex
    for i, v in pairs(levels) do
        model:ClearLevelDetail(model.giveLevels[index+i-1])
        model.giveLevels[index+i-1]=v
    end
    if CS.UILuaWindowBase.GetWindow("UI_UGCLevel") then
        Event.Brocast(LuaGameEventType.HANDLER_FLUSH_WORKERUI,index);
    end
end

function UGCModel.OnGCUgcGetOwnerLevelRspd(...)
    local rspd = MsgType.GCUgcGetOwnerLevelRspd:New(...)
    local model=UGCModel.getInstance().model
    local levels=UGCModel.PraseLevelDetail(rspd.ugcLevelDataList)
    local index=rspd.clientIndex
    for i, v in pairs(levels) do
        model:ClearLevelDetail(model.myHomeLevels[index+i-1])
        model.myHomeLevels[index+i-1]=v
    end
    if CS.UILuaWindowBase.GetWindow("UI_UgcMyHome") then
        Event.Brocast(LuaGameEventType.HANDLER_FLUSH_MYHOMEUI,index)
    end
end
--推荐关卡信息返回
function UGCModel.OnGCUgcComLevelListRspd(...)
    --print("GCUgcComLevelListRspd")
    local rspd = MsgType.GCUgcComLevelListRspd:New(...)
    local recommondInfo = UGCModel.ParseRecommondDetail(rspd.comLevelList)
    UGCModel.getInstance().model:SetRecommondLevelInfoList(recommondInfo)
end
--推荐关卡list
function UGCModel.ParseRecommondDetail(serverRecommondList)
    local recommondInfoList={}
    if serverRecommondList then
        for i, v in pairs(serverRecommondList) do
            local recommondInfo=UGCRecommondClass.new()
            recommondInfo.levelId=v.levelId
            recommondInfo.language = v.language
            recommondInfoList[i]= recommondInfo
        end
    end
    return recommondInfoList
end

--[[
ugcLevelID = "",
ownerRoleUID = 0,
ownerRoleName = "",
createTime = 0,
ugcLevelStatus = 0, --enum EUgcLevelStatus
lastModifyTime = 0,
onlineTime = 0,
offlineTime = 0,
ugcLevelName = "",
targets = "",
limit = 0,
pic = "",
like = 0,
collect = 0,
star = 0,
playCount = 0,
passRate = 0]]--
function UGCModel.PraseLevelDetail(serverLevelList)
    local levelList={}
    if serverLevelList then
        for i, v in pairs(serverLevelList) do
            local levelDetail=UGCLevelDetail.new()
            levelDetail.levelID=v .ugcLevelID
            levelDetail.levelStatus=v.ugcLevel.ugcLevelStatus
            levelDetail.ownerRoleUID=v .ugcLevel.ownerRoleUID
            levelDetail.ownerRoleName=v .ugcLevel.ownerRoleName
            levelDetail.ownerPortraitID=v .ugcLevel.ownerPortraitID
            levelDetail.createTime=v .ugcLevel.createTime
            levelDetail.lastModifyTime=v .ugcLevel.lastModifyTime
            levelDetail.onlineTime=v .ugcLevel.onlineTime
            levelDetail.offlineTime=v .ugcLevel.offlineTime
            levelDetail.like=v .ugcLevel.like
            levelDetail.collect=v .ugcLevel.collect
            levelDetail.starCount=v .ugcLevel.star
            levelDetail.tab=v.ugcLevel.tab or 0
            levelDetail.playCount=v .ugcLevel.playCount
            levelDetail.passRate=v .ugcLevel.passRate
            levelDetail.isPlayed=v .ugcLevel.isPlayed
            levelDetail.isPassed=v .ugcLevel.isPassed
            levelDetail.isFollowed=v .ugcLevel.isFollowed
            levelDetail.templateName=v .ugcLevel.ugcLevelName
            levelDetail.levelDataMd5=CS.ZipHelper.MD5Encrypt(v .ugcLevelData)
            levelDetail.jsonLevelProfile= CS.ZipHelper.inst():GZipDeCompressString(v .ugcLevelData)
            levelDetail.levelProfile =UGCModel.getInstance().model:JosnToProfile( levelDetail.jsonLevelProfile)
            levelDetail.slotsItemsCfg=UGCModel.getInstance().model:SlotsJosnToProfile( levelDetail.levelProfile.slots, levelDetail.levelProfile.width, levelDetail.levelProfile.height)
            levelList[i]= levelDetail
        end
    end
    return levelList

end

function UGCModel.OnGCUgcLevelGetListRspd(...)
    local rspd = MsgType.GCUgcLevelGetListRspd:New(...)
    local model=UGCModel.getInstance().model
    if rspd.statusType==MsgType.EUgcLevelStatus.EUgcLevelStatus_Online then
        local levels =UGCModel.PraseLevelDetail(rspd.levelList)
        if #levels>0 then
            for i, v in pairs(levels) do
                table.insert( model.orderLevels,v)
            end
        end
        if rspd.total>0 then
            model.orderLevelsTotal=rspd.total
        end
        model.orderDataInit=true
    elseif rspd.statusType==MsgType.EUgcLevelStatus.EUgcLevelStatus_None or rspd.statusType==MsgType.EUgcLevelStatus.EUgcLevelStatus_Guide then
     local levels =UGCModel.PraseLevelDetail(rspd.levelList)
        if #levels>0 then
            for i, v in pairs(levels) do
                table.insert( model.saveLevels,v)
            end
        end
        if rspd.total>0 then
            model.saveLevelsTotal=rspd.total
        end
        model.saveDataInit=true
    elseif rspd.statusType==MsgType.EUgcLevelStatus.EUgcLevelStatus_Offline then
        local levels =UGCModel.PraseLevelDetail(rspd.levelList)
        if #levels>0 then
            for i, v in pairs(levels) do
                table.insert( model.historyLevels,v)
            end
        end
        if rspd.total>0 then
            model.historyLevelsTotal=rspd.total
        end
        model.historyDataInit=true
    end
    if CS.UILuaWindowBase.GetWindow("UI_UGCLevel") then
        Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI,rspd.statusType);
    end
end

UGCRecommondClass= classUtlis()
function UGCRecommondClass:ctor()
    self.levelId = 0
    self.language = ""
end

UGCLevelProfile= classUtlis()
function UGCLevelProfile:ctor()
    self.levelID=1001
    self.number=1
    self.width=11
    self.height=9
    self.possibleColors={0,0,0,0,0,0}
    self.sugarDropPer=0.1
    self.sugarDropMin=1
    self.sugarDropMax=3
    self.stones=0
    self.limitation="Moves"
    self.limit= 5
    self.targets={"None","None"}
    self.targetCount=0
    self.targetCountTotal={0,0}
    self.colorIds={0,0}
    self.honeybeargroup={0}
    self.beargroup={0}
    self.slots={}
end

UGCMyHomePlayerInfo= classUtlis()
function UGCMyHomePlayerInfo:ctor()
    self.ownerRoleUID = 0
    self.ownerRoleName = ""
    self.ownerPortraitID = 0
    self.followCount = 0
    self.fansCount = 0
    self.wPoint = 0
    self.bPoint = 0
    self.introduction = ""
    self.total = 0
    self.isFollowed = 0
end

UGCLevelDetail= classUtlis()
function UGCLevelDetail:ctor()
    self.levelProfile=UGCLevelProfile.new()
    self.slotsItemsCfg={}
    self.levelID=0
    self.levelStatus=MsgType.EUgcLevelStatus.EUgcLevelStatus_None
    self.ownerRoleUID=0
    self.ownerRoleName=""
    self.ownerPortraitID=16001
    self.lastModifyTime=0
    self.createTime=0
    self.onlineTime=0
    self.offlineTime=0
    self.starCount=0
    self.tab=0
    self.like=0
    self.collect=0
    self.playCount=0
    self.passRate=0
    self.isPlayed=0
    self.isPassed=0
    self.isFollowed=0
    self.templateName="Template Name"
    self.jsonLevelProfile={}
    self.levelDataMd5=0
end

--[[function UGCLevelDetail:Clone()
 local clone=   UGCLevelDetail.new()
    clone.levelProfile= self.levelProfile:Clone()
    clone.levelID= self.levelID
    clone.levelStatus= self.levelStatus
    clone.ownerRoleUID= self.ownerRoleUID
    clone.ownerRoleName= self.ownerRoleName
    clone.lastModifyTime= self.lastModifyTime
    clone.createTime= self.createTime
    clone.onlineTime= self.onlineTime
    clone.offlineTime= self.offlineTime
    clone.starCount= self.starCount
    clone.like= self.like
    clone.collect= self.collect
    clone.playCount= self.playCount
    clone.passRate= self.passRate
    clone.templateName= self.templateName
    clone.jsonLevelProfile= self.jsonLevelProfile
end]]--

UGCModelClass = classUtlis()
function UGCModelClass:ctor()
    self.curEditorlevel=UGCLevelDetail.new()
    self.curlevelProfile= self.curEditorlevel.levelProfile
    self.commandStack=LuaStack.new()
    self.historyLevels={}
    self.historyLevelsTotal=0
    self.historyLevelsCurTotal=0
    self.historyPageCount=1
    self.orderLevels={}
    self.orderLevelsTotal=0
    self.orderLevelsCurTotal=0
    self.saveLevels={}
    self.saveLevelsTotal=0
    self.saveLevelsCurTotal=0
    self.giveLevels={}
    self.myHomeLevels={}
    self.myHomeLevelsTotal=0
    self.myHomeLevelsCurTotal=0
    self.factorySize = 6
    self.saveLimit=10
    local saveLimitCfg=CS.WorldParconfigManager.Instance():GetConfig(260002)
    self.saveLimit=tonumber(saveLimitCfg.parameter1)
    self.orderDataInit=false
    self.historyDataInit=false
    self.saveDataInit=false
    self.matchDataInit=false
    self.curMatchIndex = 1
    self.curRecommondIndex = 1
    self.lasrRecommondIndex = 0
    self.isTestStart =true
    self.isSaved =false
    self.rqstSending=false
    self.curEnergyCost=0
    self.isHaveSaveEditorLevel=false
    self.openTimes=0
    self.recommondLevels = {}--推荐关卡id列表
    self.recommondLevelsInfo = {} --当前推荐关卡信息
    self.localRecommondLevelsInfoLsit = {} --本地缓存关卡信息
    self.myHomePlayerInfo=UGCMyHomePlayerInfo.new()
    self.myHomeIndex=0
end

----------------------------------------network--------------------------------------------

function UGCModelClass:GetUGCOrderLevelListRqst(page)
    self:GetUGCLevelList(MsgType.EUgcLevelStatus.EUgcLevelStatus_Online,page,6,self.orderLevelsTotal);
end

function UGCModelClass:GetUGCHistoryLevelListRqst(page)
    self:GetUGCLevelList(MsgType.EUgcLevelStatus.EUgcLevelStatus_Offline,page,6,self.historyLevelsTotal);
end

function UGCModelClass:GetUGCSaveLevelListRqst(page)
  --  self:GetUGCLevelList(MsgType.EUgcLevelStatus.EUgcLevelStatus_None,page,6,self.saveLevelsTotal)
    if CS.GuideSystem.inst:CheckUGCEditorGuideFinish() then
        self:GetUGCLevelList(MsgType.EUgcLevelStatus.EUgcLevelStatus_None,page,6,self.saveLevelsTotal)
    else
        ---引导关卡改为本地
        self:SetUgcLocalGuideLevel()
      --  self:GetUGCLevelList(MsgType.EUgcLevelStatus.EUgcLevelStatus_Guide,1,30,self.saveLevelsTotal);
    end
end

function UGCModelClass:SetUgcLocalGuideLevel()
    local levels={}
    local levelDetail=UGCLevelDetail.new()
    levelDetail.levelID=1000000
    levelDetail.templateName="Boss's Amazing Level"
    self:GetGuideLevelProfile(levelDetail)
    levelDetail.levelProfile =UGCModel.getInstance().model:JosnToProfile( levelDetail.jsonLevelProfile)
    levelDetail.slotsItemsCfg=UGCModel.getInstance().model:SlotsJosnToProfile( levelDetail.levelProfile.slots, levelDetail.levelProfile.width, levelDetail.levelProfile.height)
    table.insert(levels,levelDetail)
    self.saveLevels=levels
    self.saveDataInit=true
    self.saveLevelsTotal=1
    self.saveLevelsCurTotal=6
    local co1 = coroutine.create(function()
        yield_return(CS.WaitCoroutineDefine.WaitForEndOfFrame)
        if CS.UILuaWindowBase.GetWindow("UI_UGCLevel") then
            Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI, MsgType.EUgcLevelOptType.EUgcLevelOptType_Upload)
            self.saveLevelsTotal=0
            self.saveLevelsCurTotal=0
            self.saveLevels={}
        end
    end )
    assert(coroutine.resume(co1))

end

function UGCModelClass:GetUgcLevelMatchRqst()
    local rqst=MsgType.CGUgcLevelMatchRqst:New()
    rqst:Send()
end

function UGCModelClass:GetUgcLevelSearchRqst(levelID)
    local rqst=MsgType.CGUgcLevelSearchRqst:New()
    rqst.ugcLevelID=levelID
    rqst:Send()
end

function UGCModelClass:GetUGCLevelList(state,page,rows,total)
    local rqst=MsgType.CGUgcLevelGetListRqst:New()
    rqst.statusType=state
    rqst.page=page
    rqst.rows=rows
    rqst.total=total
    rqst:Send()
end
---上传关卡验证数据
function UGCModelClass:SendUGCCheckData()
    local rqst=MsgType.CGUgcLevelSelfTestRqst:New()
    rqst.ugcLevelID=self.curEditorlevel.levelID
    rqst.chkData=MsgType.LevelCheckData:New()
    rqst.chkData.levelID=self.curEditorlevel.levelID
    if self:GetGameResult() then
        rqst.chkData.result=1
    else
        rqst.chkData.result=0
    end
    rqst.chkData.money=CS.MatchTreeProxy.inst:GetRewardGold()
    rqst.chkData.step=self.curlevelProfile.limit
    rqst.chkData.remainStep=CS.MatchTreeProxy.inst:GetRemainStep()

    rqst.chkData.moveSteps=CS.MatchTreeProxy.inst:GetMoveSteps()

    rqst.chkData.targetSteps=CS.MatchTreeProxy.inst:GetTargetSteps()

    rqst.chkData.levelDataSign=self.curEditorlevel.levelDataMd5

    rqst.chkData.checkSign=CS.ZipHelper.MD5Encrypt(rqst.chkData.levelID.. rqst.chkData.result.. rqst.chkData.money.. rqst.chkData.step.. rqst.chkData.remainStep)

    rqst:Send()
end
---获取上架关卡能量消耗数
function UGCModelClass:GetQueryUploadCostRqst()
    self:OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_QueryUploadCost)
end
---上架关卡
function UGCModelClass:UploadUGCEditorLevelRqst(levelID)
   self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Upload,levelID)
end
---上架当前关卡
function UGCModelClass:UploadCurUGCEditorLevelRqst()
    self: UploadUGCEditorLevelRqst(self.curEditorlevel.levelID)
end
---保存关卡
function UGCModelClass:SaveUGCEditorLevelRqst(levelID,levelData)
    ----id：1000000 为引导关卡不做保存操作
    if levelID==1000000 then
        levelData=nil
    end
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Edit,levelID,levelData,self.curEditorlevel.templateName)
end
---创建关卡
function UGCModelClass:CreateUGCEditorLevelRqst(levelData)
    if  self.rqstSending==false then
        self.rqstSending=true
        self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Create,0,levelData,self.curEditorlevel.templateName)
    end

end
---删除保存关卡
function UGCModelClass:DeleteUGCEditorSaveLevelRqst(levelID)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Delete,levelID,nil,nil,MsgType.EUgcLevelStatus.EUgcLevelStatus_None)
end

function UGCModelClass:RenameUGCLevelRqst(levelID,name)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Rename,levelID,nil,name)
end

---删除历史关卡
function UGCModelClass:DeleteUGCEditorHistoryLevelRqst(levelID)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Delete,levelID,nil,nil,MsgType.EUgcLevelStatus.EUgcLevelStatus_Offline)
end
---下架关卡
function UGCModelClass:CloseUGCEditorLevelRqst(levelID)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Down,levelID)
end

---增加工厂上限
function UGCModelClass:AddFactorySizeRqst()
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_BuyFactory)
end
---评价星数
function UGCModelClass:SetLevelStarRqst(star,evaluate)
    if  self.curEditorlevel.tab==0 then
        self.curEditorlevel.tab=evaluate
    end
    if  self.curEditorlevel.starCount==0 then
        self.curEditorlevel.starCount=star
    end
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Star,self.curEditorlevel.levelID,nil,nil,nil,star,evaluate)
end
---关注
function UGCModelClass:UGCFollowRqst(ownerUID)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_Follow,nil,nil,nil,nil,nil,nil,ownerUID)
end

---取消关注
function UGCModelClass:UGCCancelFollowRqst(ownerUID)
    self: OptUGCEditorLevelRqst( MsgType.EUgcLevelOptType.EUgcLevelOptType_CancelFollow,nil,nil,nil,nil,nil,nil,ownerUID)
end
---签名修改
function UGCModelClass:UGCEditorIntroductionRqst(introduction)
    local rqst=MsgType.CGUgcEditIntrRqst:New()
    rqst.introduction=introduction
    rqst:Send()
end
---刷关卡
function UGCModelClass:MatchUGCEditorLevelRqst(index)
    local rqst=MsgType.CGUgcLevelMatchRqst:New()
    rqst.clientIndex=index
    rqst:Send()
end

---主页关卡
function UGCModelClass:GetMyHomeLevelRqst(index)
    local rqst=MsgType.CGUgcGetOwnerLevelRqst:New()
    rqst.clientIndex=index
    rqst.ownerRoleUID=self.myHomePlayerInfo.ownerRoleUID
    rqst:Send()
end


---开始关卡
function UGCModelClass:UGCLevelPlayStartRqst()
    local rqst=MsgType.CGUgcLevelPlayStartRqst:New()
    rqst.ugcLevelID= self.curEditorlevel.levelID
    --[[
    local itemList = {}
    for i = 1,CS.SUBoosterButton.selectedItemList.Count do
        table.insert(itemList,tonumber(CS.SUBoosterButton.selectedItemList[i-1]))
    end]]
    local str=""
    for i = 0, 2 do
        local id= CS.MatchTreeProxy.inst:GetUGCSelectItem(i)
        if id>0 then
            str=str..id.."|"
        end
    end
    rqst.selectItemList=str
    rqst:Send()
end
--[[
ESingleCopyCalc_Finish = 0,
ESingleCopyCalc_Timeout = 1,
ESingleCopyCalc_Exist = 2
]]--
function UGCModelClass:UGCLevelPlayEndFinishRqst()
    self:UGCLevelPlayEndRqst(self.curEditorlevel.levelID,MsgType.ESingleCopyCalcType.ESingleCopyCalc_Finish,MsgType.ELevelResultType.ELRT_Pass,data)
end

function UGCModelClass:UGCLevelPlayEndExitRqst()
    self:UGCLevelPlayEndRqst(self.curEditorlevel.levelID,MsgType.ESingleCopyCalcType.ESingleCopyCalc_Finish,MsgType.ELevelResultType.ELRT_Quit)
end

function UGCModelClass:UGCLevelPlayEndFailRqst()
    self:UGCLevelPlayEndRqst(self.curEditorlevel.levelID,MsgType.ESingleCopyCalcType.ESingleCopyCalc_Finish,MsgType.ELevelResultType.ELRT_Failed)
end

function UGCModelClass:UGCLevelPlayEndRqst(levelID,singleCopyCalcType,resultType)
    local rqst=MsgType.CGUgcLevelPlayEndRqst:New()
    rqst.ugcLevelID=levelID
    rqst.singleCopyCalcType=singleCopyCalcType
    rqst.resultInfo.resultType=resultType
    rqst.resultInfo.remainStep=CS.MatchTreeProxy.inst:GetRemainStep()
    if MsgType.ELevelResultType.ELRT_Pass==resultType then
        rqst.chkData=MsgType.LevelCheckData:New()
        rqst.chkData.levelID=levelID
        if self:GetGameResult() then
            rqst.chkData.result=1
        else
            rqst.chkData.result=0
        end
        rqst.chkData.money=CS.MatchTreeProxy.inst:GetRewardGold()
        rqst.chkData.step=self.curlevelProfile.limit
        rqst.chkData.remainStep=CS.MatchTreeProxy.inst:GetRemainStep()

        rqst.chkData.moveSteps=CS.MatchTreeProxy.inst:GetMoveSteps()

        rqst.chkData.targetSteps=CS.MatchTreeProxy.inst:GetTargetSteps()

        rqst.chkData.levelDataSign=self.curEditorlevel.levelDataMd5

        rqst.chkData.checkSign=CS.ZipHelper.MD5Encrypt(rqst.chkData.levelID.. rqst.chkData.result.. rqst.chkData.money.. rqst.chkData.step.. rqst.chkData.remainStep)

    end
    rqst:Send()
end

function UGCModelClass:OptUGCEditorLevelRqst(optType,levelID,levelJsonData,levelName,statusType,star,evaluate,ownerRoleUID)
    local rqst=MsgType.CGUgcLevelOptRqst:New()
    rqst.optType=optType
    if levelJsonData then
        rqst.ugcLevelData=CS.ZipHelper.inst():GZipCompressString(levelJsonData)
    end
    if levelName then
        rqst.ugcLevelName=levelName
    end
    if levelID then
        rqst.ugcLevelID=levelID
    end
    if statusType then
        rqst.statusType=statusType
    end
    if star then
        rqst.star=star
    end
    if evaluate then
        rqst.tab=evaluate
    end
    if ownerRoleUID then
        rqst.ownerRoleUID=ownerRoleUID
    end
    rqst:Send()
end

----------------------------end network-------------------

function  UGCModelClass:ShowMyHome(playerID)
    self.myHomePlayerInfo.ownerRoleUID=playerID
    local rqst=MsgType.CGUgcGetCreatorInfoRqst:New()
    rqst.ownerRoleUID=playerID
    rqst:Send()
end

function  UGCModelClass:DeleteHistoryLevel(levelID)
    for i, v in pairs(self.historyLevels) do
        for j, k in pairs(v) do
            if k.levelID==levelID then
                table.remove(v,j)
                self:DeleteUGCEditorHistoryLevelRqst(levelID)
                Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI, MsgType.EUgcLevelOptType.EUgcLevelOptType_Delete);
                return
            end
        end
    end
end

function  UGCModelClass:DeleteSaveLevel(levelID)
    for i, v in pairs(self.saveLevels) do
            if v.levelID==levelID then
                table.remove(self.saveLevels,i)
                self.saveLevelsTotal= self.saveLevelsTotal-1
                self.saveLevelsCurTotal= self.saveLevelsCurTotal-1
                self:DeleteUGCEditorSaveLevelRqst(levelID)
                Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI, MsgType.EUgcLevelOptType.EUgcLevelOptType_Delete);
                return
        end
    end
end

function  UGCModelClass:DownOrderLevel(levelID)
    for i, v in pairs(self.orderLevels) do
           if v.levelID==levelID then
                table.remove(self.orderLevels,i)
                self.orderLevelsTotal= self.orderLevelsTotal-1
                self.orderLevelsCurTotal= self.orderLevelsCurTotal-1
                table.insert(self.historyLevels,v)
                self.historyLevelsTotal= self.historyLevelsTotal+1
                self.historyLevelsCurTotal= self.historyLevelsCurTotal+1
                self:CloseUGCEditorLevelRqst(levelID)
                Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI, MsgType.EUgcLevelOptType.EUgcLevelOptType_Delete);
               return
           end
    end
end

---本地已经可上传的关卡上传
function  UGCModelClass:UploadSaveLevel(levelID)
    for i, v in pairs(self.saveLevels) do
        if v.levelID==levelID then
            table.remove(self.saveLevels,i)
            self.saveLevelsTotal= self.saveLevelsTotal-1
            self.saveLevelsCurTotal= self.saveLevelsCurTotal-1
            table.insert(self.orderLevels,v)
            self.orderLevelsTotal= self.orderLevelsTotal+1
            self.orderLevelsCurTotal= self.orderLevelsCurTotal+1
            v.onlineTime=CS.GUIHelper.GetNowDateToUnix()
            Event.Brocast(LuaGameEventType.HANDLER_FLUSH_BUILDERUI, MsgType.EUgcLevelOptType.EUgcLevelOptType_Upload);
            return
        end
    end
end

---创建关卡插入数据
function  UGCModelClass:NewSaveLevel()
    table.insert(self.saveLevels,  self.curEditorlevel)
    self.saveLevelsTotal= self.saveLevelsTotal+1
    self.saveLevelsCurTotal= self.saveLevelsCurTotal+1
end

function UGCModelClass:ResetSlots(slots)

    for i = 1, 11 do
        slots[i]={}
        for j = 1, 9 do
            slots[i][j]={}
        end
    end
end

function UGCModelClass:SaveBeforeItem(item)
    local cmd=UGCSaveItemCmd.new(item)
    cmd:Execute()
    self.commandStack:Push(cmd)
end

function UGCModelClass:PeekBeforeItem()
   return self.commandStack:Peek()
end

function UGCModelClass:RevokeCommand()
   local cmd=  self.commandStack:Pop()
    if cmd then
       return cmd:Undo()
    end
    return
end

function UGCModelClass:ClearCommand()
   self.commandStack:Clear()
end

function UGCModelClass:SetMoves(moves)
    self.curlevelProfile.limit=moves
end

function UGCModelClass:GetMoves()
    return   self.curlevelProfile.limit
end

----设置默认标签
function UGCModelClass:SetTabState(index)
    CS.MatchTreeProxy.inst:SetUGCBuilderOrWorkerState(index)
end

----获取当前标签
function UGCModelClass:GetTabState()
    return   CS.MatchTreeProxy.inst:GetUGCBuilderOrWorkerState()
end

function UGCModelClass:CheckEnergyCount()
    --  return true
    return CS.MyPlayerInfo.Instance.EnergyCount>=self.curEnergyCost
end

function UGCModelClass:GetSavedState()
    return self.isSaved
end

function UGCModelClass:SetSavedState(isSave)
    self.isSaved=isSave
end
function UGCModelClass:GetEnergyCount()
    --  return true
    return CS.MyPlayerInfo.Instance.EnergyCount
end
--设置推荐关卡信息
function UGCModelClass:SetRecommondLevelInfoList(recommondInfoList)
    self.recommondLevels =recommondInfoList
end
--获取推荐关卡信息
function UGCModelClass:GetRecommondLevelInfoList()
    return self.recommondLevels
end
--获取推荐关卡List长度
function UGCModelClass:GetRecommondLevelInfoListLength()
    return #self.recommondLevels
end

function UGCModelClass:SetFullRecommondLevelInfo(fullRecommondInfoList)
    self.recommondLevelsInfo = fullRecommondInfoList
end
--当前的推荐关卡信息
function UGCModelClass:GetFullRecommondLevelInfo()
    return self.recommondLevelsInfo
end
--设置当前缓存的关卡信息
function UGCModelClass:SetCurLocalRecommondLevelsInfoLsit()
    --local tempLocalInfdLsit =
end
--获取当前缓存的关卡信息
function UGCModelClass:GetCurLocalRecommondLevelsInfoLsit()
    return self.localRecommondLevelsInfoLsit;
end
--获取当前缓存的关卡信息list长度
function UGCModelClass:GetCurLocalRecommondLevelsInfoLsitLength()
    return #self.localRecommondLevelsInfoLsit
end
----设置数据初始化标签
function UGCModelClass:SetDataInitState(isInit)
    self.orderDataInit=isInit
    self.historyDataInit=isInit
    self.saveDataInit=isInit
    self.matchDataInit=isInit
end

function UGCModelClass:ClearLevelDetail(levelDetail)
    if levelDetail and  levelDetail.slotsItemsCfg then
        for i = 1,11 do
            local  rList= levelDetail.slotsItemsCfg[i]
            if rList then
                for j = 1,9 do
                    local item=rList[j]
                    if item and item.slotCfg then
                        for i, v in pairs(item.slotCfg) do
                            item.slotCfg[i]=nil
                        end
                    end
                end
            end
        end
        levelDetail.levelProfile.slots=nil
    end
end

function UGCModelClass:ClearData()
    for i, v in pairs( self.giveLevels) do
        if  v then
           self:ClearLevelDetail(v)
        end
        self.giveLevels[i]=nil
    end
    self.giveLevels={}
    for i, v in pairs( self.orderLevels) do
        if  v then
            self:ClearLevelDetail(v)
        end
        self.orderLevels[i]=nil
    end
    self.orderLevels={}
    self.orderLevelsTotal=0
    self.orderLevelsCurTotal=0
    for i, v in pairs( self.saveLevels) do
        if  v then
            self:ClearLevelDetail(v)
        end
        self.saveLevels[i]=nil
    end
    self.saveLevels={}
    self.saveLevelsTotal=0
    self.saveLevelsCurTotal=0
    for i, v in pairs( self.myHomeLevels) do
        if  v then
            self:ClearLevelDetail(v)
        end
        self.myHomeLevels[i]=nil
    end
    self.myHomeLevels={}
    self.myHomeLevelsTotal=0
    self.myHomeLevelsCurTotal=0
    for i, v in pairs( self.historyLevels) do
        if  v then
            self:ClearLevelDetail(v)
        end
        self.historyLevels[i]=nil
    end
    self.historyLevels={}
    self.historyLevelsTotal=0
    self.historyLevelsCurTotal=0
    self.curMatchIndex=1
    self.curRecommondIndex = 1
    self.rqstSending=false
    self.curEditorlevel={}
    self.curlevelProfile.slots=nil
    self.curlevelProfile={}
    self:SetDataInitState(false)
    collectgarbage("collect")

end

function UGCModelClass:ExitUGC()
    CS.MatchTreeProxy.inst:SetUGCLevelState(false)
    self:ClearData()
end

function UGCModelClass:SetTemplateName(name)
    self.curEditorlevel.templateName=name
end

function UGCModelClass:GetTemplateName()
    return   self.curEditorlevel.templateName
end

function UGCModelClass:SetTarget(index,target,subType)
    self.curlevelProfile.targets[index]=target
    self.curlevelProfile.colorIds[index]=subType
end

function UGCModelClass:GetTarget(index)
   return  self.curlevelProfile.targets[index], self.curlevelProfile.colorIds[index]
end

function UGCModelClass:SetTargetCount(index,count)
    self.curlevelProfile.targetCountTotal[index]=count
end

function UGCModelClass:SetTargetCountByType(targetType,subType,count)
    for i = 1, 2 do
        if  self.curlevelProfile.targets[i]==targetType and  self.curlevelProfile.colorIds[i]==subType then
            self.curlevelProfile.targetCountTotal[i]=count
            break
        end
    end
end

function UGCModelClass:GetTargetCount(index)
     return   self.curlevelProfile.targetCountTotal[index]
end

function UGCModelClass:SetSubType(index,subType)
    self.curlevelProfile.colorIds[index]=subType
end

function UGCModelClass:SetCurLevelProfile(jsonLevelProfile,templateName,builderName,headIcon)
    CS.LevelProfile.SetCurLevelProfile( jsonLevelProfile,templateName)
    CS.MatchTreeProxy.inst:SetUGCBuilderName(builderName)
    CS.MatchTreeProxy.inst:SetUGCBuilderIcon(headIcon)
end

function UGCModelClass:CheckInTarget(target,levelProfile)
    for i, v in pairs( levelProfile.targets) do
        if v==target then
            return i
        end
    end
    return  0
end

function UGCModelClass:IsHaveCollectTarget(levelProfile)
    for i, v in pairs( levelProfile.targets) do
        print("v",v)
        if UGCItemConfigManager.IsCollectTarget(v) then
            return true
        end
    end
    return  false
end

---获取已经上架的关卡
function UGCModelClass:GetOrderLevels()
    --if  self.orderLevels==nil then
    --    self.orderLevels={}
    --    for i = 1,3 do
    --        local levelData=UGCLevelDetail.new()
    --        self:GetLevelProfile(1000+i,levelData)
    --        self.orderLevels[i]=levelData
    --    end
    --end
    if self.orderDataInit==false then
        self:GetUGCOrderLevelListRqst()
        self.orderDataInit=true
    end
    return    self.orderLevels
end

function UGCModelClass:GetOrderLevel(index)
    local level=nil
    if index<=self.orderLevelsTotal  or self.orderLevelsTotal==0 then
        if self.orderLevels[index] then
            level=self.orderLevels[index]
        else
            if index>self.orderLevelsCurTotal then
                local page=math.floor(index/6)+1
                if self.orderLevelsTotal==0 then
                    self.orderLevelsCurTotal=6
                else
                    self.orderLevelsCurTotal=math.min(self.orderLevelsCurTotal+6,self.orderLevelsTotal)
                end
                self:GetUGCOrderLevelListRqst(page)
            end
        end
    end

    return level
end

function UGCModelClass:GetOrderLevelsCount()
    return self.orderLevelsTotal
end

function UGCModelClass:GetOrderCard(index)
    local level=self:GetOrderLevel(index)
    if level then
        local card={}
        card.levelProfile=level
        card.levelID=level.levelID
        card.type="order"
        return card
    end

    return nil
end

---获取历史关卡
function UGCModelClass:GetHistoryLevel(index)
    local level=nil
    if index<=self.historyLevelsTotal  or self.historyLevelsTotal==0 then
        if self.historyLevels[index] then
            level=self.historyLevels[index]
        else
            if index>self.historyLevelsCurTotal then
                local page=math.floor(index/6)+1
                if self.historyLevelsTotal==0 then
                    self.historyLevelsCurTotal=6
                else
                    self.historyLevelsCurTotal=math.min(self.historyLevelsCurTotal+6,self.historyLevelsTotal)
                end
                self:GetUGCHistoryLevelListRqst(page)
            end
        end
    end

    return level
end

function UGCModelClass:GetHistoryLevelsCount()
    return self.historyLevelsTotal
end

function UGCModelClass:GetHistoryCard(index)
    local level=self:GetHistoryLevel(index)
    if  level then
        local card={}
        card.levelProfile= level
        card.levelID=level.levelID
        card.type="history"
        return card
    end
    return nil
end

---获取已经保存的关卡

function UGCModelClass:GetSaveLevelsCount()
    return self.saveLevelsTotal
end

function UGCModelClass:GetSaveLevel(index)
    local level=nil
    if index<=self.saveLevelsTotal  or self.saveLevelsTotal==0 then
        if self.saveLevels[index] then
            level=self.saveLevels[index]
        else
            if index>self.saveLevelsCurTotal then
                local page=math.floor(index/6)+1
                if self.saveLevelsTotal==0 then
                    self.saveLevelsCurTotal=6
                else
                    self.saveLevelsCurTotal=math.min(self.saveLevelsCurTotal+6,self.saveLevelsTotal)
                end
                self:GetUGCSaveLevelListRqst(page)
            end
        end
    end
    return level
end

function UGCModelClass:GetSaveCard(index)
    local level=self:GetSaveLevel(index)
    if level then
        local card={}
        card.levelProfile= level
        card.levelID=level.levelID
        card.type="save"
        return card
    end
    return nil
end

---获取关注的关卡
function UGCModelClass:GetMyHomeLevel(index)
    return self.myHomeLevels[index]
end
---清除关注的关卡
function UGCModelClass:ClearMyHomeLevel()
    self.myHomeIndex=0
    self.myHomeLevels={}
end
---获取推荐的关卡
function UGCModelClass:GetGiveLevel(index)
    return self.giveLevels[index]
end
---刷关卡保存最大范围
function UGCModelClass:GetGiveLevelMaxIndex()
    return 9
end
---移动关卡索引方便再次刷新显示当前
function UGCModelClass:MovePosGiveLevel()
    local tempLevels={}
    local maxIndex=self:GetGiveLevelMaxIndex()
    for i, v in pairs(self.giveLevels) do
        if v then
            local index=(i-self.curMatchIndex+maxIndex)%maxIndex+1
            tempLevels[index]=v
        end
    end
    self.giveLevels=tempLevels
end
---清除超过范围的关卡
function UGCModelClass:ClearGiveLevel(mideIndex)
    local maxIndex=self:GetGiveLevelMaxIndex()
        local num=(mideIndex+maxIndex-4-1)%maxIndex+1
        if self.giveLevels[num] then
            self.giveLevels[num]=nil
        end
        local num=(mideIndex+maxIndex+4-1)%maxIndex+1
        if self.giveLevels[num] then
            self.giveLevels[num]=nil
        end

end
function UGCModelClass:GetGiveLevels()
    return  self.giveLevels
end
function UGCModelClass:GetGivCardLength()
    return #self.giveLevels
end

function UGCModelClass:SetGiveCurIndex(index)
    self.curMatchIndex=index
end

function UGCModelClass:AddGiveCurIndex()
    self.matchDataInit=false
    self.curMatchIndex=self.curMatchIndex+1
    self.curMatchIndex=math.min(self:GetGivCardLength()+1,  self.curMatchIndex)
end

function UGCModelClass:SubGiveCurIndex()
    self.curMatchIndex=self.curMatchIndex-1
    self.curMatchIndex=math.max(1,  self.curMatchIndex)
end

function UGCModelClass:AddCurRecommondIndex()
    self.curRecommondIndex = self.curRecommondIndex+1
    self.curRecommondIndex=math.min(self.curRecommondIndex, #self.recommondLevels )
end

function UGCModelClass:SubCurRecommondIndex()
    self.curRecommondIndex = self.curRecommondIndex-1
    self.curRecommondIndex=math.max(1, self.curRecommondIndex )
end

function UGCModelClass:GetCurRecommondIndex()
    return self.curRecommondIndex
end

function UGCModelClass:SetLastRecommondIndex(lastIndex)
    self.lasrRecommondIndex = lastIndex
end

function UGCModelClass:GetLastRecommondIndex()
    return self.lasrRecommondIndex
end

function UGCModelClass:GetGiveCurIndex()
    return self.curMatchIndex
end

function UGCModelClass:GetGivCard(index)
   local level=self:GetGiveLevel(index)
    if level==nil then
        self.matchDataInit=true
        self:MatchUGCEditorLevelRqst(index)
    end
    return level
end

function UGCModelClass:SetMyHomeCurIndex(index)
    self.myHomeIndex=index
end

function UGCModelClass:GetMyHomeCurIndex()
   return  self.myHomeIndex
end


function UGCModelClass:GetMyHomeCard(index)
    local level=self:GetMyHomeLevel(index)
    if level==nil then
        self:GetMyHomeLevelRqst(index)
    end
    return level
end

---获取工厂上限
function UGCModelClass:GetFactorySize()
    return self.factorySize
end



---josn转profile
function UGCModelClass:JosnToProfile(jsonStr)
    local profile={}
    profile= JSON:decode(jsonStr, profile)
    profile.targetCount=0
    -----个别字段兼容
    if profile.targets then
        for i, v in pairs(profile.targets) do
            if v~="None"then
                profile.targetCount = profile.targetCount+1
            end
        end
    else
        profile.targets={"None","None"}
        if profile.target then
            profile.targetCount = profile.targetCount+1
            profile.targets[1]=profile.target
        end
        if profile.secondTarget then
            profile.targetCount = profile.targetCount+1
            profile.targets[2]=profile.secondTarget
        end
    end
    if profile.colorIds==nil then
        profile.colorIds={0,0}
    end
    return profile
end

function UGCModelClass:SlotsJosnToProfile(jsonSlots,width,height)
    local startX=1
    local startY=1
    local v=math.min(width,11)
    startX=math.floor((11-v)/2)+1
    startY=math.floor((9-height)/2)+1
    local itemSlots={}
    self:ResetSlots(itemSlots)
    local allItemCfgs=UGCItemConfigManager.getInstance().cfgKeyList
            for i, slot in pairs(jsonSlots) do
                local itemCfg={}
                local slotCfg ={}
                itemCfg.slotCfg=slotCfg
                slotCfg[1]=allItemCfgs["SlotEmpty_0_1"]
                if slot.chip then
                    if slot.chip~="SimpleChip" then
                        slot.color_id=-1
                    end
                    local chipCfg=allItemCfgs[slot.chip.."_"..slot.color_id.."_"..slot.chip_level]
                    if chipCfg then
                        slotCfg[chipCfg.layerID]=chipCfg
                    end
                end
                if slot.block then
                    local bloclevel=slot.block_level
                    if slot.block =="Firefly"then
                        bloclevel=1
                        if slot.isNotSrcFirefly then
                            itemCfg.isNotSrcFirefly=true
                        else
                            itemCfg.isNotSrcFirefly=false
                        end
                    end
                    local blockCfg=allItemCfgs[slot.block.."_"..slot.block_color.."_"..bloclevel]
                    if blockCfg then
                        slotCfg[blockCfg.layerID]=blockCfg
                    end
                    if slot.giftGenterator then
                        local color=-1
                        if  slot.block =="IceBlock" or slot.block =="Weed" then
                            color=0
                        end
                        local giftGenteratorCfg=allItemCfgs[slot.giftGenterator.."_"..color.."_1"]
                        if giftGenteratorCfg then
                            itemCfg.giftBlockGeneratorCfg=giftGenteratorCfg
                        end
                    end
                end
                if slot.jam then
                    local jamCfg=allItemCfgs["Jam_0_1"]
                    if jamCfg then
                        slotCfg[jamCfg.name]=jamCfg
                    end
                end
                if slot.isBonfires then
                    local ovenCfg=allItemCfgs["Oven_0_1"]
                    if ovenCfg then
                        slotCfg[ovenCfg.layerID]=ovenCfg
                    end
                end
                if slot.duster_block then
                    local dusterCfg=allItemCfgs["Duster_0_"..slot.duster_level]
                    if dusterCfg then
                        slotCfg[dusterCfg.layerID]=dusterCfg
                    end
                end
                if slot.bear_block then
                    local bearDir=2
                    if slot.bear_direction then
                        if slot.bear_direction=="Right" then
                            bearDir=3
                        end
                    end
                    local bearCfg=allItemCfgs["Bear_"..bearDir.."_1"]
                    if bearCfg then
                        slotCfg[bearCfg.name]=bearCfg
                    end
                end
                if slot.wallh then
                    local wallCfg=allItemCfgs["Wall_2_1"]
                    if wallCfg then
                        slotCfg["Wall_Bottom"]=wallCfg
                    end
                end
                if slot.wallv then
                    local wallCfg=allItemCfgs["Wall_4_1"]
                    if wallCfg then
                        slotCfg["Wall_Left"]=wallCfg
                    end
                end
                if slot.x+startX<12 then
                    itemSlots[slot.x+startX][slot.y+startY]= itemCfg
                end
            end
    return itemSlots

end

function UGCModelClass:ProfileToSlotsJson(chessItemArray,width,height)

end

---导出编辑信息json配置
function UGCModelClass:ExportJsonCfg(chessItemArray,levelProfile)
    levelProfile.width=11
    levelProfile.height=9
    self.curSlotCount=0
    local allSlots={}
    levelProfile.slots={}
    local honeBearIndex=self:CheckInTarget("HoneyBear",levelProfile)
    if honeBearIndex>0 then
        levelProfile.honeybeargroup={ levelProfile.targetCountTotal[honeBearIndex]}
    end
    local bearCount=0
    local isCollectTarget=self:IsHaveCollectTarget(levelProfile)
    for i = 0, levelProfile.width-1 do
        for j = 0, levelProfile.height-1 do
            if chessItemArray[j+1] then
                if chessItemArray[j+1][i+1] then
                    local item=chessItemArray[j+1][i+1]
                    if item.isSlotActive then
                        self.curSlotCount= self.curSlotCount+1
                        local itemCfgs=item.itemCfgs
                        local slotSettings={}
                        slotSettings.x=i
                        slotSettings.y=j
                        for i,slotcfg in pairs(itemCfgs) do
                            if  slotcfg  then
                                if slotcfg.name=="Jam" then
                                    slotSettings.jam="Jam A"
                                elseif slotcfg.name=="Duster"  then
                                    slotSettings.duster_block=true
                                    slotSettings.duster_level= slotcfg.level
                                elseif slotcfg.name=="Oven"  then
                                    slotSettings.isBonfires=true
                                elseif slotcfg.name=="Bear" then
                                    slotSettings.bear_block=true
                                    slotSettings.bear_size=1
                                    if slotcfg.color==2 then
                                        slotSettings.bear_direction="Bottom"
                                    else
                                        slotSettings.bear_direction="Right"
                                    end
                                    bearCount=bearCount+1
                                elseif slotcfg.name=="Wall"  then
                                    if slotcfg.color==1 or slotcfg.color==2then
                                        slotSettings.wallh=true
                                    else
                                        slotSettings.wallv=true
                                    end

                                end
                                if  slotcfg.type=="Chips" then
                                    slotSettings.chip= slotcfg.name
                                    slotSettings.color_id= slotcfg.color
                                    if   slotSettings.color_id>0 and  slotSettings.color_id<=6then
                                        levelProfile.possibleColors[slotSettings.color_id]=1
                                    end
                                    if UGCItemConfigManager.IsCollectTarget(slotSettings.chip) then
                                        isCollectTarget=true
                                    end
                                    slotSettings.chip_level= slotcfg.level
                                elseif slotcfg.type=="Blocks"  then
                                    slotSettings.block= slotcfg.name
                                    slotSettings.block_level= slotcfg.level

                                    if slotcfg.name=="Firefly" then
                                        slotSettings.block_level=8
                                        if item.isNotSrcFirefly then
                                            slotSettings.isNotSrcFirefly=item.isNotSrcFirefly
                                        end
                                    elseif slotcfg.name=="GiftBlock"  then
                                        if item.giftBlockGeneratorCfg then
                                            slotSettings.giftGenterator=item.giftBlockGeneratorCfg.name
                                        end
                                    end
                                    slotSettings.block_color= slotcfg.color
                                end
                            end
                        end
                        table.insert(levelProfile.slots,slotSettings)
                        allSlots[i.."_"..j]=slotSettings
                    end
                end
            end

        end

    end
    local colorCount=0;
    for i, v in pairs(levelProfile.possibleColors) do
        if  v==1 then
            colorCount=colorCount+1
        end
    end

    local addColor=5-colorCount
    if addColor>0 then
        for i, v in pairs(levelProfile.possibleColors) do
            if v==0 then
                levelProfile.possibleColors[i]=1
                addColor=addColor-1
                if addColor<=0 then
                    break
                end
            end
        end
    end
    levelProfile.beargroup={bearCount}
    local beforSlot
    local isSugarDrop=false


    for i = 0, levelProfile.width-1 do
        beforSlot=allSlots[i.."_"..0]
        isSugarDrop=false
        for j =0 , levelProfile.height-1 do
            if allSlots[i.."_"..j] then
                if j== levelProfile.height-1 then
                    allSlots[i.."_"..j].generator=1
                end
                beforSlot=allSlots[i.."_"..j]
                if isCollectTarget and isSugarDrop==false  then
                    if  allSlots[i.."_"..j].tags ==nil then
                        allSlots[i.."_"..j].tags={}
                    end
                    table.insert(allSlots[i.."_"..j].tags,"SugarDrop")
                    isSugarDrop=true
                end
            else
                isSugarDrop=false
                if beforSlot then
                    beforSlot.generator=1
                end
            end
        end
    end
    local jsonProfile=JSON:encode(levelProfile)
  --  print(jsonProfile)
    return jsonProfile
end


function UGCModelClass:GetGameResult()
   -- return true
    return CS.MatchTreeProxy.inst:GetGameResult()
end

function UGCModelClass:GetLevelProfile(levelID,levelDetail)
    local str=CS.MatchTreeProxy.inst:GetLevelProfileJson(levelID)
    levelDetail.jsonLevelProfile=str
    if str then
        levelDetail.levelProfile=self:JosnToProfile(str)
        return  levelDetail
    end
    return nil
end

function UGCModelClass:GetGuideLevelProfile(levelDetail)
    local str=CS.MatchTreeProxy.inst:GetGuideLevelProfileJson()
    levelDetail.jsonLevelProfile=str
    if str then
        levelDetail.levelProfile=self:JosnToProfile(str)
        return  levelDetail
    end
    return nil
end
---设置当前关卡配表配置
function UGCModelClass:SetLevelProfile(levelID)
    if levelID==0 then
        self:ResetSlots(self.curlevelProfile.slots)
        return
    end
    local str=CS.MatchTreeProxy.inst:GetLevelProfileJson(levelID)
    self.curEditorlevel=UGCLevelDetail.new()
    self.curlevelProfile=self:JosnToProfile(str)
    self.curEditorlevel.levelProfile= self.curlevelProfile
    self.curEditorlevel.jsonLevelProfile=str
    self.curEditorlevel.slotsItemsCfg=UGCModel.getInstance().model:SlotsJosnToProfile( self.curlevelProfile.slots, self.curlevelProfile.width, self.curlevelProfile.height)
    local templateCfg=UGCItemConfigManager.getInstance().templateKeyList[levelID]
    if templateCfg then
        print("templateCfg.name",templateCfg.name)
        self:SetTemplateName(templateCfg.name)
    end
end

---设置当前关卡编辑配置
function UGCModelClass:SetLevelProfileByUGC(levelDetail,isClearLevelID)
    self.curEditorlevel=levelDetail
    self.curlevelProfile=self.curEditorlevel.levelProfile
    if isClearLevelID then
        self.curEditorlevel.levelID=0
    end
end
---开始玩刷出来的关卡
function UGCModelClass:StartUGCMatchLevel(levelDetail)
    if levelDetail then
        self:SetLevelProfileByUGC(levelDetail)
        self:SetCurLevelProfile(  levelDetail.jsonLevelProfile,levelDetail.templateName,levelDetail.ownerRoleName,levelDetail.ownerPortraitID)
        CS.UIWindowViewManager.ShowWindowByLua("UI_LevelInfoState")
    end
end
---初始化并且进入编辑模式
function UGCModelClass:InitUGCProfileAndEnter(levelDetail,isEditor,isTry,isClearLevelID)
    self:SetLevelProfileByUGC(levelDetail,isClearLevelID)
    self:SetCurLevelProfile(  levelDetail.jsonLevelProfile,levelDetail.templateName,levelDetail.ownerRoleName,levelDetail.ownerPortraitID)
    CS.MatchTreeProxy.inst:SetUGCEditorState(isEditor,isTry)
    if isClearLevelID then
        self:SendUGCCfg()
    else
        UGCModel.getInstance().model:SetSavedState(true)
        CS.MatchTreeProxy.inst:EnterUGC(levelDetail.levelID)
    end
  --  CS.UILuaWindowBase.HideWindow("UI_UGCLevel")

end

function UGCModelClass:GetUGCEditorState()
    return  CS.MatchTreeProxy.inst:GetUGCEditorState()
end

--- 准备导出关卡配置测试
function UGCModelClass:ExportCfg(chessItemArray)
    self.isTestStart =true
    self:SetUGCCfg(chessItemArray)
    local isLegal=true
    local isLegalTemp=true
    local txtTipAll=""
    local txtTip=""
    isLegalTemp,txtTip=self:CheckTargetSetting()
    isLegal=isLegal and isLegalTemp
    if isLegalTemp==false then
        txtTipAll=txtTipAll..txtTip.."\n"
    end
    isLegalTemp,txtTip=self:CheckTargetInBoard()
    isLegal=isLegal and isLegalTemp
    if isLegalTemp==false then
        txtTipAll=txtTipAll..txtTip.."\n"
    end
    isLegalTemp,txtTip=self:CheckMoves()
    isLegal=isLegal and isLegalTemp
    if isLegalTemp==false then
        txtTipAll=txtTipAll..txtTip.."\n"
    end
    isLegalTemp,txtTip=self:CheckBoard()
    isLegal=isLegal and isLegalTemp
    if isLegalTemp==false then
        txtTipAll=txtTipAll..txtTip
    end
    if isLegal then
        if  self.isSaved then
            UGCModel.StartGameWithCurLevelProfile()
        else
            CS.GameMsgHint.inst:ShowPopupTwoBtnMsgBox(CS.GUIHelper.ParseStringTable(3224),3226,3225,
                    function ()
                        self:SendUGCCfg()
                    end,function()
                        UGCModel.StartGameWithCurLevelProfile()
                    end)
        end
    else
        CS.GameMsgHint.inst:ShowOKMsgBox(txtTipAll)
    end
end

function UGCModelClass:GetUplodTipString()
   return sstring.Format(CS.GUIHelper.ParseStringTable(3218,tostring( self.curEnergyCost)))
end
---验证关卡合法性
--检查关卡目标设置能不为空
function UGCModelClass:CheckTargetSetting()
    local isLegal=false
    if self.curlevelProfile.targets then
        for i, v in pairs(self.curlevelProfile.targets) do
            if v~="None" then
                isLegal=true
                break
            end
        end
    end
    return isLegal,sstring.Format(CS.GUIHelper.ParseStringTable(3206))
end
--关卡目标和棋盘布局合理性
function UGCModelClass:CheckTargetInBoard()
    local isLegal=true
    if self.curlevelProfile.targets then
        for i, v in pairs(self.curlevelProfile.targets) do
            if v~="None" then
                local target=   UGCItemConfigManager.getInstance().GetItemByName(v)
                if target  then
                    local count=self:CheckTargetItemCount(self.curlevelProfile.slots,v)
                    if target.type=="Blocks" or target.type=="SlotsBefore" then
                        if v=="Jam"then
                            if count==0 or self.curlevelProfile.targetCountTotal[i]>self.curSlotCount then
                                isLegal=false
                                break
                            end
                        else
                            if v=="Firefly" then
                                count=count*8
                            end
                            if self.curlevelProfile.targetCountTotal[i]>count then
                                isLegal=false
                                break
                            end
                        end
                    else
                        if target=="Stone" or target=="Matryoshka" then
                            if self.curlevelProfile.targetCountTotal[i]>count then
                                isLegal=false
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    return isLegal,sstring.Format(CS.GUIHelper.ParseStringTable(3208))
end

---统计目标个数
function UGCModelClass:CheckTargetItemCount(slots,targetName)
    local itemCount=0
    for i, v in pairs(slots) do
        if v.block ==targetName then
            if targetName=="Firefly"  then
                if v.isNotSrcFirefly~=true then
                    itemCount =itemCount+8
                end
            else
                itemCount =itemCount+1
            end

        end
        if v.chip ==targetName then
            itemCount =itemCount+1
        end
        if targetName=="Jam" then
            if v.jam then
                itemCount =itemCount+1
            end
        end
        if targetName=="Bear" then
            if v.bear_block then
                itemCount =itemCount+1
            end
        end
    end
    return itemCount
end

function UGCModelClass:CheckCurLevelTargetItemCount(targetName)
    return self:CheckTargetItemCount(self.curlevelProfile.slots,targetName)
end

--关卡不是设置
function UGCModelClass:CheckMoves()
    local isLegal=true
    isLegal=self.curlevelProfile.limit>0
    return isLegal,"步数设置太少"
end
--棋盘布局合理性
function UGCModelClass:CheckBoard()
    local isLegal=#self.curlevelProfile.slots>10
    return isLegal,sstring.Format(CS.GUIHelper.ParseStringTable(3207))
end
--- end 验证关卡合法性


function UGCModelClass:SaveUGCCfg(chessItemArray,saveAndStart)
    self.isTestStart =saveAndStart
    self:SetUGCCfg(chessItemArray)
    self:SendUGCCfg()
end

function UGCModelClass:SetUGCCfg(chessItemArray)
    local jsonProfile=self:ExportJsonCfg(chessItemArray,self.curlevelProfile)
    self.curEditorlevel.jsonLevelProfile=jsonProfile
    self.curEditorlevel.slotsItemsCfg=UGCModel.getInstance().model:SlotsJosnToProfile( self.curlevelProfile.slots, self.curlevelProfile.width, self.curlevelProfile.height)
end

function UGCModelClass:SendUGCCfg()
    if   self.curEditorlevel.levelID ==0 then
        self:CreateUGCEditorLevelRqst(self.curEditorlevel.jsonLevelProfile)
    else
        self:SaveUGCEditorLevelRqst(self.curEditorlevel.levelID,self.curEditorlevel.jsonLevelProfile)
    end
end
---计算所有格子消耗的总能量
function UGCModelClass:GetEnergyCost()
    return self.curEnergyCost
end
---计算单个消耗的能量
function UGCModelClass:CalculateItemEnergyCost(item)
  --[[
    --能量消耗改策划案，原方案代码如下
  local itemEnergyCost=0
    if item.isSlotActive then
        for i,slotcfg in pairs(item.itemCfgs) do
            if  slotcfg  then
                itemEnergyCost=itemEnergyCost+slotcfg.energyCost
            end
        end
    end]]
    return 0
end
return  UGCModel.getInstance()
