---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2018/11/5 16:40
---
--[[package.path=package.path..";D:\\UGC_Match_U3D\\Client\\Assets\\XLuaScripts\\Common\\?.lua"
require("LuaClassUtlis")
local JSON = require("Libs.json.json4lua")
baseType=classUtlis()
function baseType:ctor(x)
    print("baseType")
    self.x=x
end
function baseType:print_x()
    print(self.x)
end
function baseType:hello(a,b)
    print("baseType test")
end
test=classUtlis(baseType)
function test:ctor()
    print("test ctor")
end
function test:hello()
    print("hello test")
end
a=test.new(1)
a:hello(1)
a:print_x()
local allSlots={}
local levelProfile={}
levelProfile.levelID=1001
levelProfile.number=1
levelProfile.width=9
levelProfile.height=9
levelProfile.possibleColors={1,1,1,1,1,0}
levelProfile.sugarDropPer=0.1
levelProfile.sugarDropMin=1
levelProfile.sugarDropMax=3
levelProfile.stones=0
levelProfile.limitation="Moves"
levelProfile.limit=20
levelProfile.targets={"Color"}
levelProfile.targetCountTotal={10}
levelProfile.colorIds={1}
levelProfile.beargroup={0,0}
levelProfile.honeybeargroup={0,0}
levelProfile.slots={}
for i = 0, levelProfile.width-1 do
    for j = 0, levelProfile.height-1 do
        local slotSettings={}
        slotSettings.x=i
        slotSettings.y=j
        slotSettings.chip="SimpleChip"
        slotSettings.color_id=0;
        table.insert(levelProfile.slots,slotSettings)
        allSlots[i.."_"..j]=slotSettings
    end

end
    for i = 0, levelProfile.width-1 do
        for j =  levelProfile.height-1,0,-1 do
            if allSlots[i.."_"..j] then
                allSlots[i.."_"..j].generator=1
                break;
            end
        end
    end]]
--UGCModel.getInstance().model:SetLevelProfile(1001)
--CS.UILuaWindowBase.ShowWindow("UI_UGCLevelClearing")
--CS.UILuaWindowBase.ShowWindow("UI_UGCLevel")
--CS.UILuaWindowBase.ShowWindow("UI_Accounts")
--CS.UILuaWindowBase.ShowWindow("UI_Ugc")
--CS.LevelProfile.SaveLevelProfileToXML( JSON:encode(levelProfile),'sdsada')
---lua 协程
--function foo(a)
--    print("foo",a)
--    return coroutine.yield(2*a)
--end
--
-- co=coroutine.create(function (a,b)
--     print("co-body",a,b)
--     local r=foo(a+1)
--     print("co-body",r)
--     local r,s=coroutine.yield(a+b,a-b)
--     print("co-body",r,s)
--     return b,"end"
-- end)
--
--print("main",coroutine.resume(co,1,10))
--print("main",coroutine.resume(co,"r"))
--print("main",coroutine.resume(co,"x","y"))
--print("main",coroutine.resume(co,"x","y"))
--local util=require"xlua.util"
--local co
--local t_fun=util.cs_generator(function ()
--    print("1111")
--    coroutine.yield(CS.UnityEngine.WaitForSeconds(1))
--    print("sssssss")
--end)
--co=CS.XLua.Cast.IEnumerator(t_fun)
--StartCoroutine=util.coroutine_call
--self:StartCoroutine(co)
--- lua使用Unity协程
--local co = coroutine.create(function(callback)
--    print('coroutine start!')
--    local s = os.time()
--    yield_return(CS.UnityEngine.WaitForSeconds(3))
--    print('wait interval:', os.time() - s)
--    yield_return(CS.UnityEngine.WaitForSeconds(1))
--    print('wait interval:',1)
--    for i = 1, 10 do
--        yield_return(CS.UnityEngine.WaitForSeconds(1))
--        print('wait interval==:',i)
--    end
--    print('wait interval:',"nil")
--    callback()
--    --local www = CS.UnityEngine.WWW('http://www.qq.com')
--    --yield_return(www)
--    --if not www.error then
--    --    print(www.bytes)
--    --else
--    --    print('error:', www.error)
--    --end
--end)
--assert(coroutine.resume(co,function () print("dasdasdasd======") end))
--myTestClass2=classUtlis()
--function  myTestClass2:ctor()
--    self.a=100
--    self.b=200
--    self.c="dasdasdas"
--end
--myTestClass=classUtlis()
--function  myTestClass:ctor()
--    self.a=100
--    self.b=200
--    self.c="dasdasdas"
--    self.d=myTestClass2.new()
--end
--collectgarbage("collect")
--Test={}
--print("第一次"..collectgarbage("count"))
--for i = 1, 10000 do
--    table.insert(Test,myTestClass.new())
--end
--collectgarbage("collect")
--print("第二次"..collectgarbage("count"))
--Test={}
--collectgarbage("collect")
--print("第三次"..collectgarbage("count"))
--collectgarbage("collect")
--print("第一次"..collectgarbage("count"))
--
----local co1 = coroutine.create(function()
----    for i = 1, 100 do
----        yield_return(CS.WaitCoroutineDefine.WaitForEndOfFrame)
----    end
----    collectgarbage("collect")
----    print("第四次"..collectgarbage("count"))
----end)
----assert(coroutine.resume(co1))
--local util = require 'xlua.util'
--local  co=util.cs_generator(function ()
--    coroutine.yield(CS.WaitCoroutineDefine.WaitForEndOfFrame)
--    print("test1")
--    collectgarbage("collect")
--    print("第三次"..collectgarbage("count"))
--    coroutine.yield(CS.WaitCoroutineDefine.WaitForEndOfFrame)
--    print("test2")
--    collectgarbage("collect")
--    print("第四次"..collectgarbage("count"))
--end)
--local fun=CS.XLua.Cast.IEnumerator(co)
--cs_coroutine_runner:RunStartCoroutine(fun)
--collectgarbage("collect")
--print("第二次"..collectgarbage("count"))
--local co1 = coroutine.create(function()
--    yield_return(CS.UnityEngine.WaitForSeconds(4))
--    collectgarbage("collect")
--    print("最后"..collectgarbage("count"))
--end)
--assert(coroutine.resume(co1))
--local mri =    require("Common/MemoryReferenceInfo")
--baseType=classUtlis()
--function baseType:ctor(x)
--    print("baseType")
--    self.x=x
--end
--function baseType:print_x()
--    print(self.x)
--end
--function baseType:hello(a,b)
--    print("baseType test")
--end
--
--test=classUtlis(baseType)
--function test:ctor()
--    print("test ctor")
--end
--function test:hello()
--    print("hello test")
--end
--
--testb=classUtlis()
--function testb:ctor()
--   self.tba=test.new(1)
--    self.tbacall= function ()
--        self.tba.hello()
--    end
--end
--function testb:hello()
--    print("hello test")
--end
--mri.m_cConfig.m_bAllMemoryRefFileAddTime = false
--mri.m_cMethods.DumpMemorySnapshot("./", "1-Before", -1)
--local tbl={}
--for i = 1, 1000 do
--   local t=testb.new()
--    table.insert(tbl,t)
--end
--mri.m_cConfig.m_bAllMemoryRefFileAddTime = false
--mri.m_cMethods.DumpMemorySnapshot("./", "1-After", -1)
--mri.m_cMethods.DumpMemorySnapshotComparedFile("./", "Compared", -1, "./LuaMemRefInfo-All-[1-Before].txt", "./LuaMemRefInfo-All-[1-After].txt")
print("result",2|6)
print("result",1|4)